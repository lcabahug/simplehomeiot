{
	"info": {
		"_postman_id": "9a9bd78f-da2b-4d7f-bc40-4bf205a5772f",
		"name": "simplehomeiot-test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Preparation",
			"item": [
				{
					"name": "Keycloak Login (Standard User)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9af108e3-276b-457b-9206-ca2f9b3f5737",
								"exec": [
									"var access_token = null;",
									"if (pm.response.code === 200) {",
									"  var token = pm.response.json().access_token;",
									"  if (token != null) {",
									"    pm.collectionVariables.set(\"access-token-standard\", token);",
									"    access_token = token;",
									"  }",
									"}",
									"if (access_token == null) {",
									"  pm.collectionVariables.set(\"access-token-standard\", \"no_token_was_unable_to_get\");",
									"}",
									"",
									"pm.test(\"Response time is less than 1000 ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "client_id",
									"value": "simplehomeiot-client",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "72763b16-a83b-4ec1-ba4a-3ed99d525afe",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "openid",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "user1",
									"type": "text"
								},
								{
									"key": "password",
									"value": "user1234",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{keycloak-url}}/auth/realms/simplehomeiot/protocol/openid-connect/token",
							"host": [
								"{{keycloak-url}}"
							],
							"path": [
								"auth",
								"realms",
								"simplehomeiot",
								"protocol",
								"openid-connect",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Keycloak Login (Admin User)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "856e4c10-b315-4e00-bab1-143830ec6d36",
								"exec": [
									"var access_token = null;",
									"if (pm.response.code === 200) {",
									"  var token = pm.response.json().access_token;",
									"  if (token != null) {",
									"    pm.collectionVariables.set(\"access-token-admin\", token);",
									"    pm.collectionVariables.set(\"admin-prep-access-token\", token);",
									"    access_token = token;",
									"  }",
									"}",
									"if (access_token == null) {",
									"  pm.collectionVariables.set(\"access-token-admin\", \"no_token_was_unable_to_get\");",
									"  pm.collectionVariables.set(\"admin-prep-access-token\", \"no_token_was_unable_to_get\");",
									"}",
									"",
									"pm.test(\"Response time is less than 1000 ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "client_id",
									"value": "simplehomeiot-client",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "72763b16-a83b-4ec1-ba4a-3ed99d525afe",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "openid",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "text"
								},
								{
									"key": "password",
									"value": "admin1234",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{keycloak-url}}/auth/realms/simplehomeiot/protocol/openid-connect/token",
							"host": [
								"{{keycloak-url}}"
							],
							"path": [
								"auth",
								"realms",
								"simplehomeiot",
								"protocol",
								"openid-connect",
								"token"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "API Tests",
			"item": [
				{
					"name": "Unsecured",
					"item": [
						{
							"name": "PREP",
							"item": [
								{
									"name": "Clean Redis",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{sim-url}}/{{sim-clean-db}}",
											"host": [
												"{{sim-url}}"
											],
											"path": [
												"{{sim-clean-db}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Prepare Discovered Devices",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{sim-url}}/{{sim-register-devices}}",
											"host": [
												"{{sim-url}}"
											],
											"path": [
												"{{sim-register-devices}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Devices",
							"item": [
								{
									"name": "List Devices",
									"item": [
										{
											"name": "List all Devices",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f5f0aaa1-39eb-4465-ad77-d26e2520b2f6",
														"exec": [
															"var deviceAddress = null;",
															"if (pm.response.code === 200) {",
															"  var address = pm.response.json()[0].address;",
															"  if (address != null) {",
															"    pm.collectionVariables.set(\"deviceAddress\", address);",
															"    deviceAddress = address;",
															"  }",
															"}",
															"if (deviceAddress === null) {",
															"    var tempAddress = pm.collectionVariables.get(\"temp-address\");",
															"  pm.collectionVariables.set(\"deviceAddress\", tempAddress);",
															"}",
															"",
															"var expectedResult = pm.environment.get(\"expected-get-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "da4fcf34-b67d-4069-a91d-86ee2df9bf05",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base-url}}/devices",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"devices"
													],
													"query": [
														{
															"key": "includeRegistered",
															"value": "true",
															"disabled": true
														},
														{
															"key": "includeUnregistered",
															"value": "true",
															"disabled": true
														}
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a1625f9c-ffb2-456b-a02c-0c5248f3b86e",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "9434b499-bede-41ff-b6b1-26dcbf937b58",
												"type": "text/javascript",
												"exec": [
													"var getAllSchema = pm.environment.get(\"getAllSchema\");",
													"var Ajv  = require('ajv'),",
													"    ajv = new Ajv(),",
													"    schema = getAllSchema;",
													"(pm.response.code===200 ? pm.test : pm.test.skip)('Reply Schema is valid', function () {",
													"    pm.expect(ajv.validate(schema, pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;",
													"});"
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Register a Device",
									"item": [
										{
											"name": "Register a Device",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0ad9abd0-3e0c-4500-8bc4-3e0c169117f0",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-create-admin-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "0de8a75d-1bc1-4e11-bfaf-eb7253078e65",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"B UHTV\",\n    \"manufacturer\": \"Semsang Shark Etc.\",\n    \"comment\": \"Comment 2 existing\",\n    \"address\": \"{{deviceAddress}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/devices",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"devices"
													]
												}
											},
											"response": []
										},
										{
											"name": "[PREP] Get valid deviceId",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "bd9fe9ba-87b9-456d-8bea-2793f9f0ace4",
														"exec": [
															"var uuId = null;",
															"if (pm.response.code === 201) {",
															"  var deviceId = pm.response.json().deviceId;",
															"  if (deviceId != null) {",
															"    pm.collectionVariables.set(\"deviceId\", deviceId);",
															"    uuId = deviceId;",
															"  }",
															"}",
															"if (uuId === null) {",
															"  var tempId = pm.collectionVariables.get(\"temp-id\");",
															"  pm.collectionVariables.set(\"deviceId\", tempId);",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "fd85f8f4-9b00-4923-985d-b043b5fe4c17",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "accessToken",
															"value": "{{admin-prep-access-token}}",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"B UHTV\",\n    \"manufacturer\": \"Semsang Shark Etc.\",\n    \"comment\": \"Comment 2 existing\",\n    \"address\": \"{{deviceAddress}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/devices",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"devices"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "931637c6-9373-400c-874e-c8a6d68fe6b3",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "d5b575ca-d69d-470b-805a-c91d195b1228",
												"type": "text/javascript",
												"exec": [
													"var creationSchema = pm.environment.get(\"creationSchema\");",
													"var Ajv  = require('ajv'),",
													"    ajv = new Ajv(),",
													"    schema = creationSchema;",
													"(pm.response.code===201 ? pm.test : pm.test.skip)('Reply Schema is valid', function () {",
													"    pm.expect(ajv.validate(schema, pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;",
													"});"
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Get Specific Device Info",
									"item": [
										{
											"name": "Get Specific Device Info",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "f2d6f6e9-4dfa-484b-8b12-4d6948edf1ec",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "a3c7ae86-47c5-433a-97f4-1d1b0f1dd0d3",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-get-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base-url}}/device/{{deviceId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"device",
														"{{deviceId}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "17e424d0-e5b0-4c54-8c0f-0300b9d24220",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c909f94a-df6c-49e9-b563-74d70f0c1a32",
												"type": "text/javascript",
												"exec": [
													"var getOneSchema = pm.environment.get(\"getOneSchema\");",
													"var Ajv  = require('ajv'),",
													"    ajv = new Ajv(),",
													"    schema = getOneSchema;",
													"(pm.response.code===200 ? pm.test : pm.test.skip)('Reply Schema is valid', function () {",
													"    pm.expect(ajv.validate(schema, pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;",
													"});"
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Modify a Device",
									"item": [
										{
											"name": "Modify a Device",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "af92350d-4836-4eb2-91d8-de60711794f3",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "6a8ff42f-9231-474b-9191-646d74c5811d",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-oper-admin-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"B UHTV\",\n  \"manufacturer\": \"SakSong etc\",\n  \"comment\": \"TV - mod\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/device/{{deviceId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"device",
														"{{deviceId}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "7d4a7d77-da20-43b7-933f-f091159968ae",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "d46e5d55-5c67-4ae8-9e2c-d723d26e0afb",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Switch a Device On/Off",
									"item": [
										{
											"name": "Switch a Device On",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "df9491d7-f99c-4475-b77c-52b6b5c03a1d",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-oper-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "5ff52965-c40f-44c1-84b0-ab7ad2a700e7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"state\": \"on\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/device/{{deviceId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"device",
														"{{deviceId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Switch a Device Off",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "de4a087f-2d54-459e-8951-11f5b6ae6db1",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-oper-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "52c5bbd6-82ac-49bb-80ad-7904472e0451",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"state\": \"off\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/device/{{deviceId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"device",
														"{{deviceId}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b444dcfa-0b85-4da9-a15b-4e71b76b20f1",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "783ea853-cdca-4c6e-9d76-793f765201b2",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Delete a Device",
									"item": [
										{
											"name": "Delete a Device",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "f937472b-1810-4968-afcc-69d61c20ab78",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "dea40780-88d9-41ff-ba9d-46914467e572",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-oper-admin-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{base-url}}/device/{{deviceId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"device",
														"{{deviceId}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "8c882f16-171c-410e-b448-f0b5746d7ca8",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c5f7b54f-ba17-446d-8071-ccb839dea1da",
												"type": "text/javascript",
												"exec": [
													"var expectedResult = pm.environment.get(\"expected-oper-admin-result\");",
													"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
													"    pm.response.to.have.status(expectedResult);",
													"});"
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Usupported Operations",
									"item": [
										{
											"name": "(unsupported) GET on /device",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f3c6309a-0983-4d2f-a451-20baf7f80bac",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-noconflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base-url}}/device",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"device"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) POST on /device/*",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ce3e2879-006b-49c3-97e8-702fc55a3f1e",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-conflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"test\" : \"value\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/device/{{deviceId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"device",
														"{{deviceId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) PUT on /device",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "90978273-ca6b-4ac5-8965-0f54a0c4687b",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-noconflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"test\" : \"value\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/device",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"device"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) PUT on /devices",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "60ab6782-a751-4529-b4ae-ed04e6a4638c",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-conflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"test\" : \"value\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/devices",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"devices"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) PATCH on /device",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8a970db5-6a92-49ef-b228-6c4231a2433d",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-noconflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"test\" : \"value\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/device",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"device"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) PATCH on /devices",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6d0b9675-bbb6-4021-996a-c8e848610f1c",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-conflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"test\" : \"value\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/devices",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"devices"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) DELETE on /device",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ee446097-f2b3-41b6-86bd-56d6adfb23f7",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-noconflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{base-url}}/device",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"device"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) DELETE on /devices",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "22f3ad0d-6f90-43c2-9ec5-461ae3553419",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-conflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{base-url}}/devices",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"devices"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "083f4b8d-9080-45ef-9012-28af8d6ecf42",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c48d1865-ac4d-43e4-b5f1-d77a6b0aa1b7",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e66da195-cf9b-4079-bd34-3171a6a6bf26",
										"type": "text/javascript",
										"exec": [
											"var getDeviceSchema = {",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema\",",
											"  \"$id\": \"http://example.com/example.json\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"deviceId\": {",
											"      \"type\": \"string\",",
											"      \"format\": \"uuid\"",
											"    },",
											"    \"name\": {",
											"      \"type\": \"string\",",
											"      \"minLength\": 2,",
											"      \"maxLength\": 128",
											"    },",
											"    \"manufacturer\": {",
											"      \"type\": \"string\",",
											"      \"minLength\": 2,",
											"      \"maxLength\": 256",
											"    },",
											"    \"comment\": {",
											"      \"type\": \"string\",",
											"      \"minLength\": 2,",
											"      \"maxLength\": 1024",
											"    },",
											"    \"address\": {",
											"      \"type\": \"string\",",
											"      \"format\": \"ipv6\"",
											"    },",
											"    \"state\": {",
											"      \"type\": \"string\",",
											"      \"enum\": [\"on\", \"off\"]",
											"    },",
											"    \"availableControls\": {",
											"      \"type\": \"array\",",
											"      \"default\": [],",
											"      \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"          \"name\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"description\": {",
											"            \"type\": [\"string\", \"null\"]",
											"          },",
											"          \"controlType\": {",
											"            \"type\": \"string\",",
											"            \"enum\": [\"direct\", \"slider\", \"toggle\"]",
											"          },",
											"          \"value\": {",
											"            \"type\": [\"string\", \"null\"]",
											"          },",
											"          \"isManaged\": {",
											"            \"type\": \"boolean\"",
											"          }",
											"        },",
											"        \"required\": [",
											"          \"name\",",
											"          \"description\",",
											"          \"controlType\",",
											"          \"isManaged\"",
											"        ]",
											"      }",
											"    },",
											"    \"isRegistered\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"isGrouped\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"groupId\": {",
											"      \"type\": [\"string\", \"null\"],",
											"      \"format\": \"uuid\"",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"deviceId\",",
											"    \"name\",",
											"    \"manufacturer\",",
											"    \"comment\",",
											"    \"address\",",
											"    \"state\",",
											"    \"availableControls\",",
											"    \"isRegistered\",",
											"    \"isGrouped\"",
											"  ]",
											"};",
											"",
											"var getDevicesSchema = {",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema\",",
											"  \"$id\": \"http://example.com/example.json\",",
											"  \"type\": \"array\",",
											"  \"title\": \"Device Info\",",
											"  \"description\": \"Device Information\",",
											"  \"default\": [],",
											"  \"items\": {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"      \"deviceId\": {",
											"        \"type\": \"string\",",
											"        \"format\": \"uuid\"",
											"      },",
											"      \"name\": {",
											"        \"type\": \"string\",",
											"        \"minLength\": 2,",
											"        \"maxLength\": 128",
											"      },",
											"      \"manufacturer\": {",
											"        \"type\": \"string\",",
											"        \"minLength\": 2,",
											"        \"maxLength\": 256",
											"      },",
											"      \"comment\": {",
											"        \"type\": \"string\",",
											"        \"minLength\": 2,",
											"        \"maxLength\": 1024",
											"      },",
											"      \"address\": {",
											"        \"type\": \"string\",",
											"        \"format\": \"ipv6\"",
											"      },",
											"      \"state\": {",
											"        \"type\": \"string\",",
											"        \"enum\": [\"on\", \"off\"]",
											"      },",
											"      \"availableControls\": {",
											"        \"type\": \"array\",",
											"        \"default\": [],",
											"        \"items\": {",
											"          \"type\": \"object\",",
											"          \"properties\": {",
											"            \"name\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"description\": {",
											"              \"type\": [\"string\", \"null\"]",
											"            },",
											"            \"controlType\": {",
											"              \"type\": \"string\",",
											"              \"enum\": [\"direct\", \"slider\", \"toggle\"]",
											"            },",
											"            \"value\": {",
											"              \"type\": [\"string\", \"null\"]",
											"            },",
											"            \"isManaged\": {",
											"              \"type\": \"boolean\"",
											"            }",
											"          },",
											"          \"required\": [",
											"            \"name\",",
											"            \"description\",",
											"            \"controlType\",",
											"            \"isManaged\"",
											"          ]",
											"        }",
											"      },",
											"      \"isRegistered\": {",
											"        \"type\": \"boolean\"",
											"      },",
											"      \"isGrouped\": {",
											"        \"type\": \"boolean\"",
											"      },",
											"      \"groupId\": {",
											"        \"type\": [\"string\", \"null\"],",
											"        \"format\": \"uuid\"",
											"      }",
											"    },",
											"    \"required\": [",
											"      \"deviceId\",",
											"      \"name\",",
											"      \"manufacturer\",",
											"      \"comment\",",
											"      \"address\",",
											"      \"state\",",
											"      \"availableControls\",",
											"      \"isRegistered\",",
											"      \"isGrouped\"",
											"    ]",
											"  },",
											"  \"uniqueItems\": true",
											"};",
											"",
											"var createDeviceSchema = {",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema\",",
											"  \"$id\": \"http://example.com/example.json\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"deviceId\": {",
											"      \"type\": \"string\",",
											"      \"format\": \"uuid\"",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"deviceId\"",
											"  ]",
											"};",
											"",
											"pm.environment.set(\"getOneSchema\", getDeviceSchema);",
											"pm.environment.set(\"getAllSchema\", getDevicesSchema);",
											"pm.environment.set(\"creationSchema\", createDeviceSchema);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "cc3fbf87-c5f3-4ef5-bd7f-8cef97493811",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Groups",
							"item": [
								{
									"name": "Register a Device Group",
									"item": [
										{
											"name": "Register a Group",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5dfad057-c53b-4f71-9709-46be661984ef",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-create-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "798e494b-9809-4528-99a6-c90978e9ff9a",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"Test Group\",\n  \"description\": \"Group Test Descr\",\n  \"comment\": \"Group Test Comment\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/groups",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"groups"
													]
												}
											},
											"response": []
										},
										{
											"name": "[PREP] Get valid groupId",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "aa4995ff-7f7d-47d0-a16e-347b3848b1fc",
														"exec": [
															"var uuId = null;",
															"if (pm.response.code === 201) {",
															"  var groupId = pm.response.json().groupId;",
															"  if (groupId != null) {",
															"    pm.collectionVariables.set(\"groupId\", groupId);",
															"    uuId = groupId;",
															"  }",
															"}",
															"if (uuId === null) {",
															"  var tempId = pm.collectionVariables.get(\"temp-id\");",
															"  pm.collectionVariables.set(\"groupId\", tempId);",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "68b60252-dc04-405e-aff1-d0bab97434ef",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "accessToken",
															"value": "{{admin-prep-access-token}}",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"Test Group\",\n  \"description\": \"Group Test Descr\",\n  \"comment\": \"Group Test Comment\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/groups",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"groups"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "28aace85-ac4b-412e-81e4-bc3b5e38e69c",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "773045eb-4c88-4a15-b71d-f3ee0abb34b0",
												"type": "text/javascript",
												"exec": [
													"var creationSchema = pm.environment.get(\"creationSchema\");",
													"var Ajv  = require('ajv'),",
													"    ajv = new Ajv(),",
													"    schema = creationSchema;",
													"(pm.response.code===201 ? pm.test : pm.test.skip)('Reply Schema is valid', function () {",
													"    pm.expect(ajv.validate(schema, pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;",
													"});"
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "List Device Groups",
									"item": [
										{
											"name": "List all Groups",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "bd210a3b-3572-45d1-9402-b59db63f732f",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-get-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base-url}}/groups",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"groups"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ec2155fb-378f-41d3-b9af-3644a68bfab3",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "49641a30-0400-4170-8aac-5d4e11ac4045",
												"type": "text/javascript",
												"exec": [
													"var getAllSchema = pm.environment.get(\"getAllSchema\");",
													"var Ajv  = require('ajv'),",
													"    ajv = new Ajv(),",
													"    schema = getAllSchema;",
													"(pm.response.code===200 ? pm.test : pm.test.skip)('Reply Schema is valid', function () {",
													"    pm.expect(ajv.validate(schema, pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;",
													"});"
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Get Specific Device Group",
									"item": [
										{
											"name": "List Specific Group",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "dcb801ee-3f5b-4d9d-8d7e-2c43637cac48",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "7afc698d-04a9-40bc-9ce1-0e2bdee65c22",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-get-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base-url}}/group/{{groupId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"group",
														"{{groupId}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2093889a-5f87-4ad0-abfb-04c351afa1bd",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "48e6dac5-993c-402b-b001-3ee9dbf9c975",
												"type": "text/javascript",
												"exec": [
													"var getOneSchema = pm.environment.get(\"getOneSchema\");",
													"var Ajv  = require('ajv'),",
													"    ajv = new Ajv(),",
													"    schema = getOneSchema;",
													"(pm.response.code===200 ? pm.test : pm.test.skip)('Reply Schema is valid', function () {",
													"    pm.expect(ajv.validate(schema, pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;",
													"});"
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Modify a Device Group",
									"item": [
										{
											"name": "Modify a Group",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "bec01344-1fd2-477c-aac4-9d363ab9f1da",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "67b6d38b-44b7-474d-b97c-fb6a16ebba60",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-oper-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"group 1 name mod\",\n  \"description\": \"group 1 desc mod\",\n  \"comment\": \"comment mod\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/group/{{groupId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"group",
														"{{groupId}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5b8b2295-12f7-4d08-bd16-57516d11aa57",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "bdaffe03-a8b2-4714-982b-ea7b6cbeba20",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Enable/Disable a Device Group",
									"item": [
										{
											"name": "Enable a Group",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "ee3e2fdf-6c6a-4555-a1a3-d6a1406e10fd",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "fa4ee608-31a0-465d-a847-7ed656c4df43",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-oper-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"isEnabled\": true\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/group/{{groupId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"group",
														"{{groupId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "DIsable a Group",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "815be163-96ff-4e3c-999b-649f5ee3aa40",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "47f9e75e-1a58-4e42-a453-7fedc874c474",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-oper-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"isEnabled\": false\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/group/{{groupId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"group",
														"{{groupId}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "3eb68336-6105-4ee6-8285-ccb019a849cb",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b0d8c1cd-d473-4ab7-88f4-d7901d4e9de6",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Register a Device to Group",
									"item": [
										{
											"name": "Add a Device to Group",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "b3ccbf16-8f30-48d4-a79e-2be664d8e2cc",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "21fc5771-aa8c-43aa-b77b-d57b8dee688e",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-oper-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "{{base-url}}/group/{{groupId}}/device/{{deviceId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"group",
														"{{groupId}}",
														"device",
														"{{deviceId}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "7e152139-10d5-4a3f-90fa-d50d689193e2",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "94744031-e0a0-462d-835c-ab6cfdc7026e",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Unregister a Device from Group",
									"item": [
										{
											"name": "Remove a Device from Group",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "9cccbd7a-e8d6-4f2b-a4de-9bc75591564d",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "1e437def-9839-4d58-b59c-d51b49e2e1e4",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-oper-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{base-url}}/group/{{groupId}}/device/{{deviceId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"group",
														"{{groupId}}",
														"device",
														"{{deviceId}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "56a28895-49d5-4018-ae68-8bbd8bcfef6f",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f54d2b77-aa33-482b-ad53-c36dab9b249d",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Delete a Device Group",
									"item": [
										{
											"name": "Delete a Group",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "e6360599-fc05-4e26-9624-754899787b27",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "db015bc8-ea9d-418d-8ce5-0b13a8b2d873",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-oper-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{base-url}}/group/{{groupId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"group",
														"{{groupId}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6d4e8cb2-6b10-45b1-a4f3-f9c4b58d9e40",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b3d31313-a43b-407b-b7c2-7a76e52272f2",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Usupported Operations",
									"item": [
										{
											"name": "(unsupported) GET on /group",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "af97f777-274a-4c45-a6e6-5d000d779774",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-noconflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base-url}}/group",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"group"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) POST on /group/*",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "037b74d0-aa90-44d1-a982-f8204cb37adf",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-conflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"test\" : \"value\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/group/{{groupId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"group",
														"{{groupId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) PUT on /group",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "32b8e7cb-ae42-433c-8567-35d89e1a8fb6",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-noconflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"test\" : \"value\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/group",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"group"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) PUT on /groups",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "02add2f1-9470-454f-a24f-c5f4fb1f1f9f",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-conflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"test\" : \"value\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/groups",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"groups"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) PATCH on /group",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b7d88bb6-840b-43d7-b898-ceec7cf1c2d9",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-noconflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"test\" : \"value\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/group",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"group"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) PATCH on /groups",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "fd8755b6-4522-4682-b178-82d4530a80fa",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-conflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"test\" : \"value\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/groups",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"groups"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) DELETE on /group",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "aae564d2-0ca9-4e78-acee-5e9c8189f8d0",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-noconflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{base-url}}/group",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"group"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) DELETE on /groups",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5c8d5160-1a73-4d3d-9609-e96c6a369523",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-conflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{base-url}}/groups",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"groups"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "1751ab58-459c-461f-ab63-b8c38cd240c4",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "131ae4c0-1d89-4e95-a459-d64df35e4df2",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "16897e23-52fe-48dd-940d-98f1c120609e",
										"type": "text/javascript",
										"exec": [
											"var getGroupsSchema = {",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema\",",
											"  \"$id\": \"http://example.com/example.json\",",
											"  \"type\": \"array\",",
											"  \"title\": \"Group Info\",",
											"  \"description\": \"Group Information\",",
											"  \"default\": [],",
											"  \"items\": {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"      \"groupId\": {",
											"        \"type\": \"string\",",
											"        \"format\": \"uuid\"",
											"      },",
											"      \"name\": {",
											"        \"type\": \"string\",",
											"        \"minLength\": 3,",
											"        \"maxLength\": 64",
											"      },",
											"      \"description\": {",
											"        \"type\": [\"string\", \"null\"],",
											"        \"minLength\": 0,",
											"        \"maxLength\": 128",
											"      },",
											"      \"comment\": {",
											"        \"type\": [\"string\", \"null\"],",
											"        \"minLength\": 0,",
											"        \"maxLength\": 128",
											"      },",
											"      \"isEnabled\": {",
											"        \"type\": \"boolean\",",
											"      },",
											"      \"devices\": {",
											"        \"type\": \"array\",",
											"        \"default\": [],",
											"        \"items\": {",
											"          \"type\": \"string\",",
											"          \"format\": \"uuid\"",
											"        }",
											"      }",
											"    },",
											"    \"required\": [",
											"      \"groupId\",",
											"      \"name\",",
											"      \"description\",",
											"      \"comment\",",
											"      \"isEnabled\",",
											"      \"devices\"",
											"    ]",
											"  },",
											"  \"uniqueItems\": true",
											"};",
											"",
											"var getGroupSchema = {",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema\",",
											"  \"$id\": \"http://example.com/example.json\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"groupId\": {",
											"      \"type\": \"string\",",
											"      \"format\": \"uuid\"",
											"    },",
											"    \"name\": {",
											"      \"type\": \"string\",",
											"      \"minLength\": 3,",
											"      \"maxLength\": 64",
											"    },",
											"    \"description\": {",
											"      \"type\": [\"string\", \"null\"],",
											"      \"minLength\": 0,",
											"      \"maxLength\": 128",
											"    },",
											"    \"comment\": {",
											"      \"type\": [\"string\", \"null\"],",
											"      \"minLength\": 0,",
											"      \"maxLength\": 128",
											"    },",
											"    \"isEnabled\": {",
											"      \"type\": \"boolean\",",
											"    },",
											"    \"devices\": {",
											"      \"type\": \"array\",",
											"      \"default\": [],",
											"      \"items\": {",
											"        \"type\": \"string\",",
											"        \"format\": \"uuid\"",
											"      }",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"groupId\",",
											"    \"name\",",
											"    \"description\",",
											"    \"comment\",",
											"    \"isEnabled\",",
											"    \"devices\"",
											"  ]",
											"};",
											"",
											"var createGroupSchema = {",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema\",",
											"  \"$id\": \"http://example.com/example.json\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"groupId\": {",
											"      \"type\": \"string\",",
											"      \"format\": \"uuid\"",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"groupId\"",
											"  ]",
											"};",
											"",
											"pm.environment.set(\"getOneSchema\", getGroupSchema);",
											"pm.environment.set(\"getAllSchema\", getGroupsSchema);",
											"pm.environment.set(\"creationSchema\", createGroupSchema);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "62fc25b9-ad72-47c9-a4e8-ced3748c8864",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Controls",
							"item": [
								{
									"name": "Register a Control",
									"item": [
										{
											"name": "Register a Control (Direct)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "46a5210d-66c4-462b-8965-4ab8d27f3d18",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "249c259f-7a52-4700-a19d-70755d80d54b",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-create-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"Channel\",\n  \"description\": \"Channel Control desc\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/controls/device/{{deviceId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"controls",
														"device",
														"{{deviceId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[PREP] Get valid controlId (direct)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4094e4c3-4b75-43bb-91fa-888df5065f7c",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "164de1e8-6eaf-4ecd-b0ba-9a05b4e3307a",
														"exec": [
															"var uuId = null;",
															"if (pm.response.code === 201) {",
															"  var controlId = pm.response.json().controlId;",
															"  if (controlId != null) {",
															"    pm.collectionVariables.set(\"controlId-direct\", controlId);",
															"    uuId = controlId;",
															"  }",
															"}",
															"if (uuId === null) {",
															"  var tempId = pm.collectionVariables.get(\"temp-id\");",
															"  pm.collectionVariables.set(\"controlId-direct\", tempId);",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "accessToken",
															"value": "{{admin-prep-access-token}}",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"Channel\",\n  \"description\": \"Channel Control desc\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/controls/device/{{deviceId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"controls",
														"device",
														"{{deviceId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Register a Control (Slider)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "f4864839-fbf0-4f52-bc6f-8883c2ac9c31",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "9deacef1-c5e6-4f5d-8092-234220ae2a72",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-create-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"Volume\",\n  \"description\": \"Volume Control desc\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/controls/device/{{deviceId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"controls",
														"device",
														"{{deviceId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[PREP] Get valid controlId (slider)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "1fe89cd2-7394-4a28-8987-3995b7762e3a",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "dc7fc429-2723-41b5-bffc-46d19a1a2ff1",
														"exec": [
															"var uuId = null;",
															"if (pm.response.code === 201) {",
															"  var controlId = pm.response.json().controlId;",
															"  if (controlId != null) {",
															"    pm.collectionVariables.set(\"controlId-slider\", controlId);",
															"    uuId = controlId;",
															"  }",
															"}",
															"if (uuId === null) {",
															"  var tempId = pm.collectionVariables.get(\"temp-id\");",
															"  pm.collectionVariables.set(\"controlId-slider\", tempId);",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "accessToken",
															"value": "{{admin-prep-access-token}}",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"Volume\",\n  \"description\": \"Volume Control desc\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/controls/device/{{deviceId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"controls",
														"device",
														"{{deviceId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Register a Control (Toggle)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "b8129435-65b5-431b-a075-5a1053331b9d",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "d60ab051-6b56-42ee-a279-0970a0b0c478",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-create-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"Mute\",\n  \"description\": \"Mute Control desc\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/controls/device/{{deviceId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"controls",
														"device",
														"{{deviceId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[PREP] Get valid controlId (toggle)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "665265d0-613c-4796-b7ad-5912a4c42824",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "e030593e-ea79-47d6-9e84-7e98d20ef676",
														"exec": [
															"var uuId = null;",
															"if (pm.response.code === 201) {",
															"  var controlId = pm.response.json().controlId;",
															"  if (controlId != null) {",
															"    pm.collectionVariables.set(\"controlId-toggle\", controlId);",
															"    uuId = controlId;",
															"  }",
															"}",
															"if (uuId === null) {",
															"  var tempId = pm.collectionVariables.get(\"temp-id\");",
															"  pm.collectionVariables.set(\"controlId-toggle\", tempId);",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "accessToken",
															"value": "{{admin-prep-access-token}}",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"Mute\",\n  \"description\": \"Mute Control desc\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/controls/device/{{deviceId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"controls",
														"device",
														"{{deviceId}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "72553b9c-aafb-49c2-a816-8bceac6a3193",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "13b6a9b5-5223-4499-a32a-503d9979d22a",
												"type": "text/javascript",
												"exec": [
													"var creationSchema = pm.environment.get(\"creationSchema\");",
													"var Ajv  = require('ajv'),",
													"    ajv = new Ajv(),",
													"    schema = creationSchema;",
													"(pm.response.code===201 ? pm.test : pm.test.skip)('Reply Schema is valid', function () {",
													"    pm.expect(ajv.validate(schema, pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;",
													"});"
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "List all Controls",
									"item": [
										{
											"name": "List all Controls",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "688c87f9-0c0d-42d5-9e1c-ec73a3ad0eda",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base-url}}/controls/devices",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"controls",
														"devices"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "1699cd4d-4033-464b-ae4a-c4fdabcad138",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b1140ee6-f861-4ae8-b0c2-a3d311fb83f0",
												"type": "text/javascript",
												"exec": [
													"var expectedResult = pm.environment.get(\"expected-get-result\");",
													"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
													"    pm.response.to.have.status(expectedResult);",
													"});",
													"",
													"var getAllSchema = pm.environment.get(\"getAllSchema\");",
													"var Ajv  = require('ajv'),",
													"    ajv = new Ajv(),",
													"    schema = getAllSchema;",
													"(pm.response.code===200 ? pm.test : pm.test.skip)('Reply Schema is valid', function () {",
													"    pm.expect(ajv.validate(schema, pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;",
													"});"
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "List all Controls for Specified Device",
									"item": [
										{
											"name": "List all Controls for Specific Device",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "9270db9a-845a-4f1e-a386-7a70afaf7207",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "d8a40d79-a8c6-4320-b63b-872043f6066c",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base-url}}/controls/device/{{deviceId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"controls",
														"device",
														"{{deviceId}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c787e7d4-83bd-4ef1-9ca2-fdd852afd143",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "0a3533e0-5737-4359-ba4e-fdc423b6ac09",
												"type": "text/javascript",
												"exec": [
													"var expectedResult = pm.environment.get(\"expected-get-result\");",
													"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
													"    pm.response.to.have.status(expectedResult);",
													"});",
													"",
													"var getAllSchema = pm.environment.get(\"getAllSchema\");",
													"var Ajv  = require('ajv'),",
													"    ajv = new Ajv(),",
													"    schema = getAllSchema;",
													"(pm.response.code===200 ? pm.test : pm.test.skip)('Reply Schema is valid', function () {",
													"    pm.expect(ajv.validate(schema, pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;",
													"});"
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Set Controls",
									"item": [
										{
											"name": "Set Control - Direct",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "cfd80598-06e8-4798-9826-de8309679302",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "a32779af-76ae-4349-8967-479b3cedfd97",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-oper-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"newValue\": \"15\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/controls/device/direct/{{controlId-direct}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"controls",
														"device",
														"direct",
														"{{controlId-direct}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Set Control - Slider",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "aea8aa9d-f1d0-4d95-a02b-c4fd8d1c8547",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "484b9357-6a0b-47e7-a0aa-4a17856861ac",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-oper-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"direction\": \"up\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/controls/device/slider/{{controlId-slider}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"controls",
														"device",
														"slider",
														"{{controlId-slider}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Set Control - Toggle",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "c2afd428-823f-4f49-b69d-f72a1c1733bf",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "88518b43-b69e-4444-aa66-87bedb5c7509",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-oper-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "{{base-url}}/controls/device/toggle/{{controlId-toggle}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"controls",
														"device",
														"toggle",
														"{{controlId-toggle}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ef589af4-086f-4a6e-916b-a3a03c198e95",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ff0871fc-1a13-4223-96b8-83b65f4184ca",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Modify a Control",
									"item": [
										{
											"name": "Modify a Control (Direct)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "c5098e04-e5b1-44fd-ab03-4ecdba543fce",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "2c271471-76fa-4913-8d81-555953c41dcf",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-oper-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"description\": \"new-description X\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/control/{{controlId-direct}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"control",
														"{{controlId-direct}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Modify a Control (Slider)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "cb1bd7d0-bffa-4901-8829-896fe7a36b25",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "c92b8201-ffd9-4105-bc4e-e3fcb544759a",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-oper-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"description\": \"new-description Y\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/control/{{controlId-slider}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"control",
														"{{controlId-slider}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Modify a Control (Toggle)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "ca3a4a96-6ad5-4d73-be3c-95503cd348ed",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "1b35e754-b7e7-4f23-a780-e0c0ae0fd2dc",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-oper-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"description\": \"new-description Z\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/control/{{controlId-toggle}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"control",
														"{{controlId-toggle}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d06710b5-1d0a-4f97-8335-dc51a0e1f3d2",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "7694bb83-5172-4df3-9640-3f69233b89af",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Delete a Control",
									"item": [
										{
											"name": "Delete a Control (Direct)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "9258f652-378e-46b9-b102-e44fb4173d0b",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "61e2adaa-3c05-46ed-b6b6-84964a6495f1",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-oper-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{base-url}}/control/{{controlId-direct}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"control",
														"{{controlId-direct}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete a Control (Slider)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "0ff824a7-00d4-470f-85fb-3bb3addefa11",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "ef78d1a0-82a1-4649-8d19-64b08a257a3a",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-oper-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{base-url}}/control/{{controlId-slider}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"control",
														"{{controlId-slider}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete a Control (Toggle)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "06474163-cb56-4a2b-8485-647c3df99aa2",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "309e67d1-4387-44ba-a05a-a4f6dede2f2d",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-oper-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{base-url}}/control/{{controlId-toggle}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"control",
														"{{controlId-toggle}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f9c343ac-e4eb-48c5-9289-9b1e8b3ffccb",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ab054ac2-4d97-4029-8797-7bf04b7dbd62",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Usupported Operations",
									"item": [
										{
											"name": "(unsupported) GET on /control",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0ccb722a-ff45-4f45-ba7a-ead015520c6e",
														"exec": [
															"var expectedResult = 404;",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base-url}}/control",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"control"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) POST on /control/*",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6294ebf9-62c4-4c19-a831-eba682da18e3",
														"exec": [
															"var expectedResult = 401;",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"test\" : \"value\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/control/{{controlId-direct}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"control",
														"{{controlId-direct}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) PUT on /control",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0e770b1d-53ee-4c61-911a-77186818c505",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-noconflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"test\" : \"value\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/control",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"control"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) PUT on /controls",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e8a413ae-c064-4000-8ad2-67d1a9989eda",
														"exec": [
															"var expectedResult = 404;",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"test\" : \"value\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/controls",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"controls"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) PATCH on /control",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f4b34178-8206-4dde-80a6-69ade4e3dfce",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-noconflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"test\" : \"value\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/control",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"control"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) PATCH on /controls",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2146742f-acae-4c04-a502-8d6c911099a1",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-noconflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"test\" : \"value\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/controls",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"controls"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) DELETE on /control",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9daa5909-a7f3-4049-af46-76b9cd4750b8",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-noconflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{base-url}}/control",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"control"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) DELETE on /controls",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "7a0e7372-c269-4837-881b-b8917784f7af",
														"exec": [
															"var expectedResult = 404;",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{base-url}}/controls",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"controls"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "352db45c-803d-4176-bee7-94c913873b7f",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f4e242d9-df8d-4c0a-9524-8a27adc4e4ab",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e1a523eb-a8fa-4351-89f2-439a7863668f",
										"type": "text/javascript",
										"exec": [
											"var getControlsSchema = {",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema\",",
											"  \"$id\": \"http://example.com/example.json\",",
											"  \"type\": \"array\",",
											"  \"title\": \"Control Info\",",
											"  \"description\": \"Control Information\",",
											"  \"default\": [],",
											"  \"items\": {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"      \"deviceId\": {",
											"        \"type\": \"string\",",
											"        \"format\": \"uuid\"",
											"      },",
											"      \"controlId\": {",
											"        \"type\": \"string\",",
											"        \"format\": \"uuid\"",
											"      },",
											"      \"name\": {",
											"        \"type\": \"string\",",
											"        \"minLength\": 2,",
											"        \"maxLength\": 128",
											"      },",
											"      \"description\": {",
											"        \"type\": [\"string\", \"null\"],",
											"        \"minLength\": 2,",
											"        \"maxLength\": 1024",
											"      },",
											"      \"currentValue\": {",
											"        \"type\": [\"string\", \"null\"],",
											"        \"minLength\": 1,",
											"        \"maxLength\": 128",
											"      }",
											"    },",
											"    \"required\": [",
											"      \"deviceId\",",
											"      \"controlId\",",
											"      \"name\",",
											"      \"description\"",
											"    ]",
											"  },",
											"  \"uniqueItems\": true",
											"};",
											"",
											"var getControlSchema = {",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema\",",
											"  \"$id\": \"http://example.com/example.json\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"deviceId\": {",
											"      \"type\": \"string\",",
											"      \"format\": \"uuid\"",
											"    },",
											"    \"controlId\": {",
											"      \"type\": \"string\",",
											"      \"format\": \"uuid\"",
											"    },",
											"    \"name\": {",
											"      \"type\": \"string\",",
											"      \"minLength\": 2,",
											"      \"maxLength\": 128",
											"    },",
											"    \"description\": {",
											"      \"type\": [\"string\", \"null\"],",
											"      \"minLength\": 0,",
											"      \"maxLength\": 128",
											"    },",
											"    \"currentValue\": {",
											"      \"type\": [\"string\", \"null\"],",
											"      \"minLength\": 1,",
											"      \"maxLength\": 128",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"deviceId\",",
											"    \"controlId\",",
											"    \"name\",",
											"    \"description\"",
											"  ]",
											"};",
											"",
											"var createControlSchema = {",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema\",",
											"  \"$id\": \"http://example.com/example.json\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"controlId\": {",
											"      \"type\": \"string\",",
											"      \"format\": \"uuid\"",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"controlId\"",
											"  ]",
											"};",
											"",
											"pm.environment.set(\"getOneSchema\", getControlSchema);",
											"pm.environment.set(\"getAllSchema\", getControlsSchema);",
											"pm.environment.set(\"creationSchema\", createControlSchema);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4dc0204c-9d8f-4f6b-bbff-f05830d3e2f4",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Logs",
							"item": [
								{
									"name": "List all Controller Logs",
									"item": [
										{
											"name": "List all Controller Logs",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "abf850f3-671e-483f-a0e6-b80dd61c31a4",
														"exec": [
															"var simBaseUrl = pm.collectionVariables.get(\"sim-url\");",
															"",
															"//Simulator - Create a List of 2 Controller Logs",
															"var simAction = pm.collectionVariables.get(\"sim-register-control-logs\");",
															"var options = {",
															"  'method': 'POST',",
															"  'url': simBaseUrl + \"/\" + simAction,",
															"  'header': {",
															"    'Content-Type': 'application/json',",
															"    'Accept': 'application/json'",
															"  }",
															"};",
															"pm.sendRequest(options, function (err, response) {",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "de42ab33-93bc-4de7-8c24-6a9b2d1487c3",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-get-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base-url}}/logs/controller",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"logs",
														"controller"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "9bfbb087-cd23-431e-a2da-4a8c799a2e42",
												"type": "text/javascript",
												"exec": [
													"var getLogsSchema = {",
													"  \"$schema\": \"http://json-schema.org/draft-07/schema\",",
													"  \"$id\": \"http://example.com/example.json\",",
													"  \"type\": \"array\",",
													"  \"title\": \"Controller Log Info\",",
													"  \"description\": \"Controller Log Information\",",
													"  \"default\": [],",
													"  \"items\": {",
													"    \"type\": \"object\",",
													"    \"properties\": {",
													"      \"timestamp\": {",
													"        \"type\": \"string\",",
													"        \"format\": \"date-time\"",
													"      },",
													"      \"level\": {",
													"        \"type\": \"string\",",
													"        \"enum\": [\"critical\", \"error\", \"warning\", \"info\", \"debug\", \"trace\" ]",
													"      },",
													"      \"title\": {",
													"        \"type\": \"string\",",
													"        \"minLength\": 4",
													"      },",
													"      \"message\": {",
													"        \"type\": \"string\",",
													"        \"minLength\": 8,",
													"      },",
													"      \"logId\": {",
													"        \"type\": \"string\",",
													"        \"format\": \"uuid\"",
													"      }",
													"    },",
													"    \"required\": [",
													"      \"timestamp\",",
													"      \"level\",",
													"      \"title\",",
													"      \"message\",",
													"      \"logId\"",
													"    ]",
													"  },",
													"  \"uniqueItems\": true",
													"};",
													"",
													"pm.environment.set(\"getAllSchema\", getLogsSchema);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "339830af-8165-467f-a17f-640ec2cab73d",
												"type": "text/javascript",
												"exec": [
													"var getAllSchema = pm.environment.get(\"getAllSchema\");",
													"var Ajv  = require('ajv'),",
													"    ajv = new Ajv(),",
													"    schema = getAllSchema;",
													"(pm.response.code===200 ? pm.test : pm.test.skip)('Reply Schema is valid', function () {",
													"    pm.expect(ajv.validate(schema, pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;",
													"});"
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "List all Device Logs",
									"item": [
										{
											"name": "List all Device Logs",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9b6a42d6-d501-4987-b30e-727f56f106b3",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-get-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "7c1beafe-d792-4032-a76a-bcb204cd13e5",
														"exec": [
															"var simBaseUrl = pm.collectionVariables.get(\"sim-url\");",
															"",
															"//Simulator - Create a List of 2 Device Logs",
															"var simAction = pm.collectionVariables.get(\"sim-register-device-logs\");",
															"var devId = pm.collectionVariables.get(\"deviceId\");",
															"var options = {",
															"  'method': 'POST',",
															"  'url': simBaseUrl + \"/\" + simAction + \"/\" + devId,",
															"  'header': {",
															"    'Content-Type': 'application/json',",
															"    'Accept': 'application/json'",
															"  }",
															"};",
															"pm.sendRequest(options, function (err, response) {",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base-url}}/logs/devices",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"logs",
														"devices"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "bf22a023-9140-49c0-8dd3-26d19c7d232a",
												"type": "text/javascript",
												"exec": [
													"var getLogsSchema = {",
													"  \"$schema\": \"http://json-schema.org/draft-07/schema\",",
													"  \"$id\": \"http://example.com/example.json\",",
													"  \"type\": \"array\",",
													"  \"title\": \"Device Log Info\",",
													"  \"description\": \"Device Log Information\",",
													"  \"default\": [],",
													"  \"items\": {",
													"    \"type\": \"object\",",
													"    \"properties\": {",
													"      \"timestamp\": {",
													"        \"type\": \"string\",",
													"        \"format\": \"date-time\"",
													"      },",
													"      \"level\": {",
													"        \"type\": \"string\",",
													"        \"enum\": [\"critical\", \"error\", \"warning\", \"info\", \"debug\", \"trace\" ]",
													"      },",
													"      \"deviceId\": {",
													"        \"type\": \"string\",",
													"        \"format\": \"uuid\"",
													"      },",
													"      \"title\": {",
													"        \"type\": \"string\",",
													"        \"minLength\": 4",
													"      },",
													"      \"message\": {",
													"        \"type\": \"string\",",
													"        \"minLength\": 8,",
													"      },",
													"      \"logId\": {",
													"        \"type\": \"string\",",
													"        \"format\": \"uuid\"",
													"      }",
													"    },",
													"    \"required\": [",
													"      \"timestamp\",",
													"      \"level\",",
													"      \"title\",",
													"      \"message\",",
													"      \"logId\"",
													"    ]",
													"  },",
													"  \"uniqueItems\": true",
													"};",
													"",
													"pm.environment.set(\"getAllSchema\", getLogsSchema);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "1bc2634d-8cde-4ea8-b3bc-3e5b0beb44cc",
												"type": "text/javascript",
												"exec": [
													"var getAllSchema = pm.environment.get(\"getAllSchema\");",
													"var Ajv  = require('ajv'),",
													"    ajv = new Ajv(),",
													"    schema = getAllSchema;",
													"(pm.response.code===200 ? pm.test : pm.test.skip)('Reply Schema is valid', function () {",
													"    pm.expect(ajv.validate(schema, pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;",
													"});"
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "List all Logs for Specific Device",
									"item": [
										{
											"name": "List all Logs for Specified Device",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "14837edb-8ecb-4068-b669-e94a0a1af4d8",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "4a2a9e5d-8401-47bb-b37b-123bbc657ec9",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-get-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base-url}}/logs/device/{{deviceId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"logs",
														"device",
														"{{deviceId}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f821fec1-e0c2-40be-aea2-1ca32582b1eb",
												"type": "text/javascript",
												"exec": [
													"var getLogsSchema = {",
													"  \"$schema\": \"http://json-schema.org/draft-07/schema\",",
													"  \"$id\": \"http://example.com/example.json\",",
													"  \"type\": \"array\",",
													"  \"title\": \"Device Log Info\",",
													"  \"description\": \"Device Log Information\",",
													"  \"default\": [],",
													"  \"items\": {",
													"    \"type\": \"object\",",
													"    \"properties\": {",
													"      \"timestamp\": {",
													"        \"type\": \"string\",",
													"        \"format\": \"date-time\"",
													"      },",
													"      \"level\": {",
													"        \"type\": \"string\",",
													"        \"enum\": [\"critical\", \"error\", \"warning\", \"info\", \"debug\", \"trace\" ]",
													"      },",
													"      \"deviceId\": {",
													"        \"type\": \"string\",",
													"        \"format\": \"uuid\"",
													"      },",
													"      \"title\": {",
													"        \"type\": \"string\",",
													"        \"minLength\": 4",
													"      },",
													"      \"message\": {",
													"        \"type\": \"string\",",
													"        \"minLength\": 8,",
													"      },",
													"      \"logId\": {",
													"        \"type\": \"string\",",
													"        \"format\": \"uuid\"",
													"      }",
													"    },",
													"    \"required\": [",
													"      \"timestamp\",",
													"      \"level\",",
													"      \"title\",",
													"      \"message\",",
													"      \"logId\"",
													"    ]",
													"  },",
													"  \"uniqueItems\": true",
													"};",
													"",
													"pm.environment.set(\"getAllSchema\", getLogsSchema);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "fa777529-0e2d-4e0a-9318-d021873d20f4",
												"type": "text/javascript",
												"exec": [
													"var getFilteredSchema = pm.environment.get(\"getAllSchema\");",
													"var Ajv  = require('ajv'),",
													"    ajv = new Ajv(),",
													"    schema = getFilteredSchema;",
													"(pm.response.code===200 ? pm.test : pm.test.skip)('Reply Schema is valid', function () {",
													"    pm.expect(ajv.validate(schema, pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;",
													"});"
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Delete Controller Logs",
									"item": [
										{
											"name": "Delete Controller Logs",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "2dd0e2dd-c224-4e0e-8898-4c3954c38d8c",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "c49d8ce8-a818-4d78-97bc-a0524626efd4",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-oper-admin-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{base-url}}/logs/controller",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"logs",
														"controller"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6217b8c4-815d-4cd6-9e56-29024cacf210",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "dcfb3688-5b83-4252-bdf3-988005d12db5",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Delete Logs for Specific Device",
									"item": [
										{
											"name": "Delete Logs for Specified Device",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "83599dcb-61e7-4f83-a3fc-49c6b8e9ae4d",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "ffa10742-2152-42e4-b490-a9dce83e0e21",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-oper-admin-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{base-url}}/logs/device/{{deviceId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"logs",
														"device",
														"{{deviceId}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "be4e99fa-cfed-4251-b0fe-3b89722ae9f9",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "5b54b992-1944-4dc5-bd2a-a51b222923c6",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Delete all Device Logs",
									"item": [
										{
											"name": "Delete Logs for all Devices",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "af5629bd-7d54-44d5-8dfe-cad020bcd2d9",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-oper-admin-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "db8ffcc8-6bd0-4677-8708-b2e1a3ed23d1",
														"exec": [
															"var simBaseUrl = pm.collectionVariables.get(\"sim-url\");",
															"",
															"//Simulator - Create a List of 2 Device Logs",
															"var simAction = pm.collectionVariables.get(\"sim-register-device-logs\");",
															"var devId = pm.collectionVariables.get(\"deviceId\");",
															"var options = {",
															"  'method': 'POST',",
															"  'url': simBaseUrl + \"/\" + simAction + \"/\" + devId,",
															"  'header': {",
															"    'Content-Type': 'application/json',",
															"    'Accept': 'application/json'",
															"  }",
															"};",
															"pm.sendRequest(options, function (err, response) {",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{base-url}}/logs/devices",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"logs",
														"devices"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "998f2d7f-ddc3-404c-b125-3a55a06a1b68",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "5ad1df71-b339-43bf-95f0-52dff86778f1",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Unsupported Operations",
									"item": [
										{
											"name": "(unsupported) POST on /logs/controller",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "edbbd503-ceac-4f89-b5a7-c2fdcc5a83a5",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-conflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{base-url}}/logs/controller",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"logs",
														"controller"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) PUT on /logs/controller",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8e229283-0d03-46c8-85fd-a755e728a975",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-conflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{base-url}}/logs/controller",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"logs",
														"controller"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) PATCH on /logs/controller",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "dac8c146-5b7b-493a-9f1e-c7969899a0b9",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-conflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "{{base-url}}/logs/controller",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"logs",
														"controller"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) POST on /logs/device/*",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f1651368-5c9c-4ed8-8d98-685f3c9e963a",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-conflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{base-url}}/logs/device/{{deviceId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"logs",
														"device",
														"{{deviceId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) POST on /logs/devices",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d93517f8-d835-49b8-b30b-3a3896419b33",
														"exec": [
															"var expectedResult = 401;",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{base-url}}/logs/devices",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"logs",
														"devices"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) PUT on /logs/device/*",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c0545b39-71d8-44dd-a368-4d930dc7f2c6",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-conflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{base-url}}/logs/device/{{deviceId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"logs",
														"device",
														"{{deviceId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) PUT on /logs/devices",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "4be22a8a-7526-47c5-bc59-327727ab057c",
														"exec": [
															"var expectedResult = 401;",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{base-url}}/logs/devices",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"logs",
														"devices"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) PATCH on /logs/device/*",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "fea0ff8c-ab85-4431-a785-6d093bddd5c0",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-conflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "{{base-url}}/logs/device/{{deviceId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"logs",
														"device",
														"{{deviceId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) PATCH on /logs/devices",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d6852b23-fe53-4044-8592-4c8ce7c7fa35",
														"exec": [
															"var expectedResult = 401;",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "{{base-url}}/logs/devices",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"logs",
														"devices"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) GET on /device",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5d23d529-10fd-4ae7-97a6-03c3434e940f",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-noconflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base-url}}/logs/device",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"logs",
														"device"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) DELETE on /device",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "52f2840b-7c38-4ff5-871e-0b24a5817d75",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-noconflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{base-url}}/logs/device",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"logs",
														"device"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d337104a-d27c-4cd9-9329-e9620e2a8415",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "25bf125d-f031-48bf-9e1d-dca820faf97c",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Timers",
							"item": [
								{
									"name": "Register a Timer",
									"item": [
										{
											"name": "Register a Timer",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "395c685b-585b-4689-916e-f898a23c4719",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-create-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "9cf16776-c54f-4531-a486-2879ac9043fb",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"timerType\": \"interval\",\n  \"intervalPattern\": \"daily\",\n  \"startDateTime\": \"2020-11-05T20:40:34.800Z\",\n  \"endDateTime\": \"2020-12-05T20:40:34.800Z\",\n  \"intervalPeriod\": 1,\n  \"setDateTimes\": [],\n  \"timerTarget\": [\n    {\n      \"controlId\": \"{{controlId-direct}}\",\n      \"action\": \"direct\",\n      \"directValue\": \"15\"\n    },\n    {\n      \"controlId\": \"{{controlId-slider}}\",\n      \"action\": \"slider-up\"\n    },\n    {\n      \"controlId\": \"{{controlId-toggle}}\",\n      \"action\": \"toggle\"\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/timers",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"timers"
													]
												}
											},
											"response": []
										},
										{
											"name": "[PREP] Get valid timerId",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9500e274-c281-4028-b154-dfdd137e6ff9",
														"exec": [
															"var uuId = null;",
															"if (pm.response.code === 201) {",
															"  var timerId = pm.response.json().timerId;",
															"  if (timerId != null) {",
															"    pm.collectionVariables.set(\"timerId\", timerId);",
															"    uuId = timerId;",
															"  }",
															"}",
															"if (uuId === null) {",
															"  var tempId = pm.collectionVariables.get(\"temp-id\");",
															"  pm.collectionVariables.set(\"timerId\", tempId);",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "145522b6-424c-4b9a-aaae-ee8a5be8fa28",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "accessToken",
															"value": "{{admin-prep-access-token}}",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"timerType\": \"interval\",\n  \"intervalPattern\": \"daily\",\n  \"startDateTime\": \"2020-11-05T20:40:34.800Z\",\n  \"endDateTime\": \"2020-12-05T20:40:34.800Z\",\n  \"intervalPeriod\": 1,\n  \"setDateTimes\": [],\n  \"timerTarget\": [\n    {\n      \"controlId\": \"{{controlId-direct}}\",\n      \"action\": \"direct\",\n      \"directValue\": \"15\"\n    },\n    {\n      \"controlId\": \"{{controlId-slider}}\",\n      \"action\": \"slider-up\"\n    },\n    {\n      \"controlId\": \"{{controlId-toggle}}\",\n      \"action\": \"toggle\"\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/timers",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"timers"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c25a209b-c7b3-4a0d-bbec-ac8990526335",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e463a8bd-42f0-4e6b-aab8-d7c550500b86",
												"type": "text/javascript",
												"exec": [
													"var creationSchema = pm.environment.get(\"creationSchema\");",
													"var Ajv  = require('ajv'),",
													"    ajv = new Ajv(),",
													"    schema = creationSchema;",
													"(pm.response.code===201 ? pm.test : pm.test.skip)('Reply Schema is valid', function () {",
													"    pm.expect(ajv.validate(schema, pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;",
													"});"
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "List Timers",
									"item": [
										{
											"name": "List all Timers",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "7059848c-fc26-4ec4-a214-5bfd72fefc62",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-get-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base-url}}/timers",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"timers"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "092bbaf9-959a-487b-b546-350247898d2a",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "88060b45-1bc8-435b-afa5-e8e7308ecc4c",
												"type": "text/javascript",
												"exec": [
													"var getAllSchema = pm.environment.get(\"getAllSchema\");",
													"var Ajv  = require('ajv'),",
													"    ajv = new Ajv(),",
													"    schema = getAllSchema;",
													"(pm.response.code===200 ? pm.test : pm.test.skip)('Reply Schema is valid', function () {",
													"    pm.expect(ajv.validate(schema, pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;",
													"});"
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Get Specific Timer Info",
									"item": [
										{
											"name": "List Specific Timer",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "ac16bfa0-88f8-4d0c-9369-fd7338db17cb",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "3d2ef939-ec0e-428d-ab10-3837c9d7b924",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-get-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base-url}}/timer/{{timerId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"timer",
														"{{timerId}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "83d7c81b-bb45-4c11-8c04-b45fe6476047",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b42cd528-9f7f-41a6-a029-47eb0d0310bc",
												"type": "text/javascript",
												"exec": [
													"var getOneSchema = pm.environment.get(\"getOneSchema\");",
													"var Ajv  = require('ajv'),",
													"    ajv = new Ajv(),",
													"    schema = getOneSchema;",
													"(pm.response.code===200 ? pm.test : pm.test.skip)('Reply Schema is valid', function () {",
													"    pm.expect(ajv.validate(schema, pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;",
													"});"
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Modify a Timer",
									"item": [
										{
											"name": "Modify a Timer",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "58f13700-4fa2-47de-b249-88b6be44bfea",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "33df1a61-51fc-4fae-b496-3436d9017fd8",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-oper-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"timerType\": \"interval\",\n  \"intervalPattern\": \"daysPerWeek\",\n  \"startDateTime\": \"2020-11-05T20:40:34.800Z\",\n  \"endDateTime\": \"2020-12-05T20:40:34.800Z\",\n  \"intervalPeriod\": 2,\n  \"setDateTimes\": [],\n  \"timerTarget\": [\n    {\n      \"controlId\": \"{{controlId-direct}}\",\n      \"action\": \"direct\",\n      \"directValue\": \"15\"\n    },\n    {\n      \"controlId\": \"{{controlId-slider}}\",\n      \"action\": \"slider-up\"\n    },\n    {\n      \"controlId\": \"{{controlId-toggle}}\",\n      \"action\": \"toggle\"\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/timer/{{timerId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"timer",
														"{{timerId}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5e1cf776-3454-41c3-8e43-1e8a03d965cc",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "d85e4f05-c7f1-4734-adff-19fb0a8c0f97",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Set Action to Timer",
									"item": [
										{
											"name": "Set Action to Timer",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "b46b8381-b9b6-4713-826f-f4ee839ef55a",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "3f336000-4404-4a84-9e26-ab6b8ebb4be1",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-oper-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"timerTarget\": [\n    {\n      \"controlId\": \"{{controlId-direct}}\",\n      \"action\": \"direct\",\n      \"directValue\": \"3\"\n    },\n    {\n      \"controlId\": \"{{controlId-slider}}\",\n      \"action\": \"slider-down\"\n    },\n    {\n      \"controlId\": \"{{controlId-toggle}}\",\n      \"action\": \"toggle\"\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/timer/{{timerId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"timer",
														"{{timerId}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "7b8d96a9-f02e-441f-a11c-1fa1eafedb34",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "79c251bb-b5cf-47af-a013-7a0000a8f28b",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Delete a Timer",
									"item": [
										{
											"name": "Delete a Timer",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "7dcff431-5501-4242-bf1f-d754c009e4eb",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "876ce28d-bcca-431f-aa27-5a161f1acf45",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-oper-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{base-url}}/timer/{{timerId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"timer",
														"{{timerId}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f8e351ae-55d7-4a1b-b7fe-e52980e06adf",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "0ba46764-3505-44ac-83a1-107990f41299",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Usupported Operations",
									"item": [
										{
											"name": "(unsupported) GET on /timer",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1d978185-1c22-4831-ac6f-e170824c54f0",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-noconflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base-url}}/timer",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"timer"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) POST on /timer/*",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5b3cc728-8bf1-48de-a265-e05a9ea1f278",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-conflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"test\" : \"value\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/timer/{{timerId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"timer",
														"{{timerId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) PUT on /timer",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ef77adc4-9fcf-4324-a2ed-3d1df95957d9",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-noconflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"test\" : \"value\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/timer",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"timer"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) PUT on /timers",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e4ab72ea-ae40-4975-b7a7-450eb55c4903",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-conflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"test\" : \"value\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/timers",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"timers"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) PATCH on /timer",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a5904e3d-7fb8-49b7-a6db-73c692957ae8",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-noconflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"test\" : \"value\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/timer",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"timer"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) PATCH on /timers",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e9a57522-68f5-4f42-810c-3ff48af11602",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-conflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"test\" : \"value\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/timers",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"timers"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) DELETE on /timer",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6459990d-cc20-4521-9d12-782b2a9dba05",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-noconflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{base-url}}/timer",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"timer"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) DELETE on /timers",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "33ed1c29-c0a3-4d97-b792-800f6abaded3",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-conflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{base-url}}/timers",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"timers"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a1dc41dd-de00-41e5-b37e-5eafe6cfc12c",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "025e71c7-8e02-45a7-b0a0-9e11d8b0e735",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0c961e96-a471-440d-b500-b015be375c03",
										"type": "text/javascript",
										"exec": [
											"var getTimersSchema = {",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema\",",
											"  \"$id\": \"http://example.com/example.json\",",
											"  \"type\": \"array\",",
											"  \"title\": \"Timer Info\",",
											"  \"description\": \"Timer Information\",",
											"  \"default\": [],",
											"  \"items\": {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"      \"timerId\": {",
											"        \"type\": \"string\",",
											"        \"format\": \"uuid\"",
											"      },",
											"      \"timerType\": {",
											"        \"type\": \"string\",",
											"        \"enum\": [\"once\", \"interval\"]",
											"      },",
											"      \"intervalPattern\": {",
											"        \"type\": [\"string\", \"null\"],",
											"        \"enum\": [\"timesPerDay\", \"daily\", \"daysPerWeek\", \"weekly\", \"daysPerMonth\", \"monthly\", \"daysPerYear\", \"yearly\", \"custom\"]",
											"      },",
											"      \"startDateTime\": {",
											"        \"type\": \"string\",",
											"        \"format\": \"date-time\"",
											"      },",
											"      \"endDateTime\": {",
											"        \"type\": [\"string\", \"null\"],",
											"        \"format\": \"date-time\"",
											"      },",
											"      \"intervalPeriod\": {",
											"        \"type\": \"integer\",",
											"        \"minimum\": 0,",
											"        \"maximum\": 365",
											"      },",
											"      \"setDateTimes\": {",
											"        \"type\": \"array\",",
											"        \"default\": [],",
											"        \"items\": {",
											"          \"type\": \"string\",",
											"          \"format\": \"date-time\"",
											"        }",
											"      },",
											"      \"timerTarget\": {",
											"        \"type\": \"array\",",
											"        \"default\": [],",
											"        \"items\": {",
											"          \"type\": \"object\",",
											"          \"properties\": {",
											"            \"controlId\": {",
											"              \"type\": \"string\",",
											"              \"format\": \"uuid\"",
											"            },",
											"            \"action\": {",
											"              \"type\": \"string\",",
											"              \"enum\": [\"switch-on\", \"switch-off\", \"direct\", \"slider-up\", \"slider-down\", \"toggle\"]",
											"            },",
											"            \"directValue\": {",
											"              \"type\": [\"string\", \"null\"],",
											"              \"minLength\": 1,",
											"              \"maxLength\": 128",
											"            }",
											"          },",
											"          \"required\": [",
											"            \"controlId\",",
											"            \"action\"",
											"          ]",
											"        }",
											"      }",
											"    },",
											"    \"required\": [",
											"      \"timerId\",",
											"      \"timerType\",",
											"      \"timerTarget\"",
											"    ]",
											"  },",
											"  \"uniqueItems\": true",
											"};",
											"",
											"var getTimerSchema = {",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema\",",
											"  \"$id\": \"http://example.com/example.json\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"timerId\": {",
											"      \"type\": \"string\",",
											"      \"format\": \"uuid\"",
											"    },",
											"    \"timerType\": {",
											"      \"type\": \"string\",",
											"      \"enum\": [\"once\", \"interval\"]",
											"    },",
											"    \"intervalPattern\": {",
											"      \"type\": [\"string\", \"null\"],",
											"      \"enum\": [\"timesPerDay\", \"daily\", \"daysPerWeek\", \"weekly\", \"daysPerMonth\", \"monthly\", \"daysPerYear\", \"yearly\", \"custom\"]",
											"    },",
											"    \"startDateTime\": {",
											"      \"type\": \"string\",",
											"      \"format\": \"date-time\"",
											"    },",
											"    \"endDateTime\": {",
											"      \"type\": [\"string\", \"null\"],",
											"      \"format\": \"date-time\"",
											"    },",
											"    \"intervalPeriod\": {",
											"      \"type\": \"integer\",",
											"      \"minimum\": 0,",
											"      \"maximum\": 365",
											"    },",
											"    \"setDateTimes\": {",
											"      \"type\": \"array\",",
											"      \"default\": [],",
											"      \"items\": {",
											"        \"type\": \"string\",",
											"        \"format\": \"date-time\"",
											"      }",
											"    },",
											"    \"timerTarget\": {",
											"      \"type\": \"array\",",
											"      \"default\": [],",
											"      \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"          \"controlId\": {",
											"            \"type\": \"string\",",
											"            \"format\": \"uuid\"",
											"          },",
											"          \"action\": {",
											"            \"type\": \"string\",",
											"            \"enum\": [\"switch-on\", \"switch-off\", \"direct\", \"slider-up\", \"slider-down\", \"toggle\"]",
											"          },",
											"          \"directValue\": {",
											"            \"type\": [\"string\", \"null\"],",
											"            \"minLength\": 1,",
											"            \"maxLength\": 128",
											"          }",
											"        },",
											"        \"required\": [",
											"          \"controlId\",",
											"          \"action\"",
											"        ]",
											"      }",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"timerId\",",
											"    \"timerType\",",
											"    \"timerTarget\"",
											"  ]",
											"};",
											"",
											"var createTimerSchema = {",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema\",",
											"  \"$id\": \"http://example.com/example.json\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"timerId\": {",
											"      \"type\": \"string\",",
											"      \"format\": \"uuid\"",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"timerId\"",
											"  ]",
											"};",
											"",
											"pm.environment.set(\"getOneSchema\", getTimerSchema);",
											"pm.environment.set(\"getAllSchema\", getTimersSchema);",
											"pm.environment.set(\"creationSchema\", createTimerSchema);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "36d61d68-98a8-4d86-adf9-f8451a6c0a03",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Zones",
							"item": [
								{
									"name": "Register a Zone",
									"item": [
										{
											"name": "Register a Zone",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9d25e7b6-48ff-44c9-9736-a5e574b830db",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-create-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"Speakers - Living Room\",\n  \"comment\": \"All Speakers grouped in the Living Room\",\n  \"deviceIds\": [\n    \"{{deviceId}}\"\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/zones",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"zones"
													]
												}
											},
											"response": []
										},
										{
											"name": "[PREP] Get valid zoneId",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8698319c-70cb-4b3e-827b-e83e5e55410c",
														"exec": [
															"var uuId = null;",
															"if (pm.response.code === 201) {",
															"  var zoneId = pm.response.json().zoneId;",
															"  if (zoneId != null) {",
															"    pm.collectionVariables.set(\"zoneId\", zoneId);",
															"    uuId = zoneId;",
															"  }",
															"}",
															"if (uuId === null) {",
															"  var tempId = pm.collectionVariables.get(\"temp-id\");",
															"  pm.collectionVariables.set(\"zoneId\", tempId);",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "accessToken",
															"value": "{{admin-prep-access-token}}",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"Speakers - Living Room\",\n  \"comment\": \"All Speakers grouped in the Living Room\",\n  \"deviceIds\": [\n    \"{{deviceId}}\"\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/zones",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"zones"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5df2afb8-94ca-444a-951c-93805940e348",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "330d233c-6b21-4b83-adbe-3d4ae7845576",
												"type": "text/javascript",
												"exec": [
													"var creationSchema = pm.environment.get(\"creationSchema\");",
													"var Ajv  = require('ajv'),",
													"    ajv = new Ajv(),",
													"    schema = creationSchema;",
													"(pm.response.code===201 ? pm.test : pm.test.skip)('Reply Schema is valid', function () {",
													"    pm.expect(ajv.validate(schema, pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;",
													"});"
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "List Zones",
									"item": [
										{
											"name": "List all Zones",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "fb27b61a-0eee-4136-8ace-12ce0dd2bd47",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-get-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base-url}}/zones",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"zones"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "595f5ca0-d709-4bb3-b65f-e3a4075cde79",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "9f8b574e-ff17-46ac-ba18-647c88005cb1",
												"type": "text/javascript",
												"exec": [
													"var getAllSchema = pm.environment.get(\"getAllSchema\");",
													"var Ajv  = require('ajv'),",
													"    ajv = new Ajv(),",
													"    schema = getAllSchema;",
													"(pm.response.code===200 ? pm.test : pm.test.skip)('Reply Schema is valid', function () {",
													"    pm.expect(ajv.validate(schema, pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;",
													"});"
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Get Specific Zone Info",
									"item": [
										{
											"name": "List Specific Zone",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "66a72379-d343-4f0c-973c-7fb0ae885c4c",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "a428ae85-96d5-40e6-8827-eea5e8037e0f",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-get-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base-url}}/zone/{{zoneId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"zone",
														"{{zoneId}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "9661ece4-765a-433b-ab6d-ce6d5bc22558",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c04498c7-53da-4e2b-bf01-638c2167eaf7",
												"type": "text/javascript",
												"exec": [
													"var getOneSchema = pm.environment.get(\"getOneSchema\");",
													"var Ajv  = require('ajv'),",
													"    ajv = new Ajv(),",
													"    schema = getOneSchema;",
													"(pm.response.code===200 ? pm.test : pm.test.skip)('Reply Schema is valid', function () {",
													"    pm.expect(ajv.validate(schema, pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;",
													"});"
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Modify a Zone",
									"item": [
										{
											"name": "Modify a Zone",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "8a4d4ab1-f1f8-4765-a30e-44814fb2b15f",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "2abacc00-d36d-4bf3-9876-65b868871956",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-oper-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"Speakers - Living Room Mod\",\n  \"comment\": \"All Speakers grouped in the Living Room Mod\",\n  \"deviceIds\": [\n    \"{{deviceId}}\"\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/zone/{{zoneId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"zone",
														"{{zoneId}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "1839ce54-ad65-46ad-8a11-da2ea60df98d",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b09c85e8-d2c4-4f05-9fee-2fb7534d5f8c",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Register Devices to Zone",
									"item": [
										{
											"name": "Register Devices to Zone",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "788dd6e8-390a-44e3-9dd9-396687f3c2bd",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "7ae4e758-f662-499f-95a9-071f7725b9b6",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-oper-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"deviceIds\": [\n    \"{{deviceId}}\"\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/zone/{{zoneId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"zone",
														"{{zoneId}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d1fb93ac-3220-427e-aabf-42aac2e24ac3",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a169bc9d-8569-4f79-b3d7-a3695f5c25cd",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Delete a Zone",
									"item": [
										{
											"name": "Delete a Zone",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "d4764f06-b521-4631-b0a2-e453243c12de",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "ca6fd88b-764e-448e-aa4f-c3599dea5caa",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-oper-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{base-url}}/zone/{{zoneId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"zone",
														"{{zoneId}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ea531368-52c9-45ad-820a-d1e5cb7f8019",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f3a0a4ca-077e-42c5-9ed2-51d9d33462f1",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Usupported Operations",
									"item": [
										{
											"name": "(unsupported) GET on /zone",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "60725327-5076-49a5-8fda-481e5de5e590",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-noconflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base-url}}/zone",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"zone"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) POST on /zone/*",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3153cd57-2d54-4c1b-a2b7-6a70dd369760",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-conflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"test\" : \"value\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/zone/{{zoneId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"zone",
														"{{zoneId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) PUT on /zone",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3d093738-ea6b-47d6-904a-d50d0c3310fd",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-noconflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"test\" : \"value\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/zone",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"zone"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) PUT on /zones",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "175dd8c7-59b8-4d4a-857e-d3d82b1ce430",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-conflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"test\" : \"value\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/zones",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"zones"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) PATCH on /zone",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "10bb0b1a-bea0-43d1-82e1-4da1771e3cd1",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-noconflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"test\" : \"value\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/zone",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"zone"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) PATCH on /zones",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2b7c52c8-bf03-4f73-b168-9b86e27f50d9",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-conflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"test\" : \"value\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/zones",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"zones"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) DELETE on /zone",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c269f067-b883-4f1a-bb4d-5a70358f67c9",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-noconflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{base-url}}/zone",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"zone"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) DELETE on /zones",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3923f57d-74f3-4179-8b76-64051ecb2144",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-conflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{base-url}}/zones",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"zones"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "907af254-427d-40a6-b9e6-b3dbf111a80f",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "40a78cf9-6cf4-437a-ac58-42b48b34b7c2",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e12715ad-3eef-4be6-8fce-57a6819bded0",
										"type": "text/javascript",
										"exec": [
											"var getZonesSchema = {",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema\",",
											"  \"$id\": \"http://example.com/example.json\",",
											"  \"type\": \"array\",",
											"  \"title\": \"Zone Info\",",
											"  \"description\": \"Zone Information\",",
											"  \"default\": [],",
											"  \"items\": {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"      \"zoneId\": {",
											"        \"type\": \"string\",",
											"        \"format\": \"uuid\"",
											"      },",
											"      \"name\": {",
											"        \"type\": \"string\",",
											"        \"minLength\": 2,",
											"        \"maxLength\": 128",
											"      },",
											"      \"comment\": {",
											"        \"type\": \"string\",",
											"        \"minLength\": 8,",
											"        \"maxLength\": 1024",
											"      },",
											"      \"deviceIds\": {",
											"        \"type\": \"array\",",
											"        \"default\": [],",
											"        \"items\": {",
											"          \"type\": \"string\",",
											"          \"format\": \"uuid\"",
											"        }",
											"      }",
											"    },",
											"    \"required\": [",
											"      \"zoneId\",",
											"      \"name\",",
											"      \"comment\",",
											"      \"deviceIds\"",
											"    ]",
											"  },",
											"  \"uniqueItems\": true",
											"};",
											"",
											"var getZoneSchema = {",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema\",",
											"  \"$id\": \"http://example.com/example.json\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"zoneId\": {",
											"      \"type\": \"string\",",
											"      \"format\": \"uuid\"",
											"    },",
											"    \"name\": {",
											"      \"type\": \"string\",",
											"      \"minLength\": 2,",
											"      \"maxLength\": 128",
											"    },",
											"    \"comment\": {",
											"      \"type\": \"string\",",
											"      \"minLength\": 8,",
											"      \"maxLength\": 1024",
											"    },",
											"    \"deviceIds\": {",
											"      \"type\": \"array\",",
											"      \"default\": [],",
											"      \"items\": {",
											"        \"type\": \"string\",",
											"        \"format\": \"uuid\"",
											"      }",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"zoneId\",",
											"    \"name\",",
											"    \"comment\",",
											"    \"deviceIds\"",
											"  ]",
											"};",
											"",
											"var createZoneSchema = {",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema\",",
											"  \"$id\": \"http://example.com/example.json\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"zoneId\": {",
											"      \"type\": \"string\",",
											"      \"format\": \"uuid\"",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"zoneId\"",
											"  ]",
											"};",
											"",
											"pm.environment.set(\"getOneSchema\", getZoneSchema);",
											"pm.environment.set(\"getAllSchema\", getZonesSchema);",
											"pm.environment.set(\"creationSchema\", createZoneSchema);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3af50927-0e27-4c4e-a88c-8b580a6aa87e",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b2f3c084-33a6-4684-8565-0f65e638a8e5",
								"type": "text/javascript",
								"exec": [
									"pm.environment.set(\"expected-get-result\", 401);",
									"pm.environment.set(\"expected-oper-result\", 401);",
									"pm.environment.set(\"expected-create-result\", 401);",
									"pm.environment.set(\"expected-oper-admin-result\", 401);",
									"pm.environment.set(\"expected-create-admin-result\", 401);",
									"pm.environment.set(\"expected-unsup-oper-noconflict-result\", 401);",
									"pm.environment.set(\"expected-unsup-oper-conflict-result\", 500);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "97bd30ea-5186-4225-868e-f73d0f0a36c0",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Secured - Standard User",
					"item": [
						{
							"name": "PREP",
							"item": [
								{
									"name": "Clean Redis",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{sim-url}}/{{sim-clean-db}}",
											"host": [
												"{{sim-url}}"
											],
											"path": [
												"{{sim-clean-db}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Prepare Discovered Devices",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{sim-url}}/{{sim-register-devices}}",
											"host": [
												"{{sim-url}}"
											],
											"path": [
												"{{sim-register-devices}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Devices",
							"item": [
								{
									"name": "List Devices",
									"item": [
										{
											"name": "List all Devices",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "51a862ed-6f6a-497b-8a3e-0b009eb712f6",
														"exec": [
															"var deviceAddress = null;",
															"if (pm.response.code === 200) {",
															"  var address = pm.response.json()[0].address;",
															"  if (address != null) {",
															"    pm.collectionVariables.set(\"deviceAddress\", address);",
															"    deviceAddress = address;",
															"  }",
															"}",
															"if (deviceAddress === null) {",
															"    var tempAddress = pm.collectionVariables.get(\"temp-address\");",
															"  pm.collectionVariables.set(\"deviceAddress\", tempAddress);",
															"}",
															"",
															"var expectedResult = pm.environment.get(\"expected-get-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "64451ca4-ae5e-42f2-97a9-a9ef31d20822",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base-url}}/devices",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"devices"
													],
													"query": [
														{
															"key": "includeRegistered",
															"value": "true",
															"disabled": true
														},
														{
															"key": "includeUnregistered",
															"value": "true",
															"disabled": true
														}
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "dbdcc8c7-b0a8-4a17-a5ff-d6f155de2b2f",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e91f8987-38eb-476f-8720-f670e222afc8",
												"type": "text/javascript",
												"exec": [
													"var getAllSchema = pm.environment.get(\"getAllSchema\");",
													"var Ajv  = require('ajv'),",
													"    ajv = new Ajv(),",
													"    schema = getAllSchema;",
													"(pm.response.code===200 ? pm.test : pm.test.skip)('Reply Schema is valid', function () {",
													"    pm.expect(ajv.validate(schema, pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;",
													"});"
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Register a Device",
									"item": [
										{
											"name": "Register a Device",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "864eb34f-3c4e-4aed-9a3a-472d832d1a90",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-create-admin-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "8a37e6bd-3d69-4a32-9e34-affc1ab8e9be",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"B UHTV\",\n    \"manufacturer\": \"Semsang Shark Etc.\",\n    \"comment\": \"Comment 2 existing\",\n    \"address\": \"{{deviceAddress}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/devices",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"devices"
													]
												}
											},
											"response": []
										},
										{
											"name": "[PREP] Get valid deviceId",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "aba68af3-073b-47ca-9f75-0c9c9aa09664",
														"exec": [
															"var uuId = null;",
															"if (pm.response.code === 201) {",
															"  var deviceId = pm.response.json().deviceId;",
															"  if (deviceId != null) {",
															"    pm.collectionVariables.set(\"deviceId\", deviceId);",
															"    uuId = deviceId;",
															"  }",
															"}",
															"if (uuId === null) {",
															"  var tempId = pm.collectionVariables.get(\"temp-id\");",
															"  pm.collectionVariables.set(\"deviceId\", tempId);",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "16c44e36-299e-4b8c-a5d0-623fe7f83387",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "accessToken",
															"value": "{{admin-prep-access-token}}",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"B UHTV\",\n    \"manufacturer\": \"Semsang Shark Etc.\",\n    \"comment\": \"Comment 2 existing\",\n    \"address\": \"{{deviceAddress}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/devices",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"devices"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ac8b5e20-82e7-4b04-8c2b-afea9c31afeb",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "7a3c84eb-3280-475c-b7ec-ef6da2ea4a75",
												"type": "text/javascript",
												"exec": [
													"var creationSchema = pm.environment.get(\"creationSchema\");",
													"var Ajv  = require('ajv'),",
													"    ajv = new Ajv(),",
													"    schema = creationSchema;",
													"(pm.response.code===201 ? pm.test : pm.test.skip)('Reply Schema is valid', function () {",
													"    pm.expect(ajv.validate(schema, pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;",
													"});"
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Get Specific Device Info",
									"item": [
										{
											"name": "Get Specific Device Info",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "ded1e7c6-14a0-4f08-9f68-60d5ecdd9a1f",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "e790712b-dce2-43e0-a2ee-0063e5948e32",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-get-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base-url}}/device/{{deviceId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"device",
														"{{deviceId}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2586746d-d456-4bfb-9bbe-394cdcef38c7",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f46750e3-e907-4bbf-8d30-f250ef1f9b5b",
												"type": "text/javascript",
												"exec": [
													"var getOneSchema = pm.environment.get(\"getOneSchema\");",
													"var Ajv  = require('ajv'),",
													"    ajv = new Ajv(),",
													"    schema = getOneSchema;",
													"(pm.response.code===200 ? pm.test : pm.test.skip)('Reply Schema is valid', function () {",
													"    pm.expect(ajv.validate(schema, pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;",
													"});"
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Modify a Device",
									"item": [
										{
											"name": "Modify a Device",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "1e4e7975-308d-4f7a-be1e-c5185a7c0100",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "775eb2e3-f658-45a1-9cae-ef0a4c013057",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-oper-admin-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"B UHTV\",\n  \"manufacturer\": \"SakSong etc\",\n  \"comment\": \"TV - mod\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/device/{{deviceId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"device",
														"{{deviceId}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d861bb0a-e6be-4606-902f-93bc2cc86e31",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "8b16f719-ce46-48d8-8ca9-07758966981c",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Switch a Device On/Off",
									"item": [
										{
											"name": "Switch a Device On",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a92df68e-324e-4dc5-8557-d2936a3eb87b",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-oper-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "b3f63b41-dc61-49d7-83a2-6528246589d5",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"state\": \"on\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/device/{{deviceId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"device",
														"{{deviceId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Switch a Device Off",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e71de2f6-fc16-4bad-a5c9-80bcc13247f8",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-oper-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "6493684d-5dd8-4636-b479-423384ab9f32",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"state\": \"off\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/device/{{deviceId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"device",
														"{{deviceId}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a60f8cd0-8427-4415-bfc9-b6e788583598",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "eebaaef1-c8e6-49ca-93f5-11eb282ac27e",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Delete a Device",
									"item": [
										{
											"name": "Delete a Device",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "3217b404-4685-4ff2-835d-dfa195d6c70c",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "f4ec1c8a-69fc-4255-b6f1-2d222c16f201",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-oper-admin-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{base-url}}/device/{{deviceId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"device",
														"{{deviceId}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "3c3fb21a-f21d-4da8-a8a9-76ba82b12a3d",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ca1bf48c-e165-4e8a-b1da-15d6eeaa3b73",
												"type": "text/javascript",
												"exec": [
													"var expectedResult = pm.environment.get(\"expected-oper-admin-result\");",
													"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
													"    pm.response.to.have.status(expectedResult);",
													"});"
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Usupported Operations",
									"item": [
										{
											"name": "(unsupported) GET on /device",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0c2a6267-be3a-422d-8c2c-307648a89e95",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-noconflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base-url}}/device",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"device"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) POST on /device/*",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "539173db-dff8-491d-a85b-0ae1014cdb7a",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-conflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"test\" : \"value\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/device/{{deviceId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"device",
														"{{deviceId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) PUT on /device",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9d025416-a9eb-4d71-80f2-e45504e62c4a",
														"exec": [
															"var expectedResult = 403;",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"test\" : \"value\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/device",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"device"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) PUT on /devices",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "284fce29-6fc7-40db-9b17-ce865f8fa0b9",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-conflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"test\" : \"value\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/devices",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"devices"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) PATCH on /device",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "501382fd-138c-4bb5-81d1-63f729a0443e",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-noconflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"test\" : \"value\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/device",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"device"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) PATCH on /devices",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "aa69a886-7c8d-49e3-9252-e246793a053a",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-conflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"test\" : \"value\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/devices",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"devices"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) DELETE on /device",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "692002c3-730d-4af9-8421-84610a401716",
														"exec": [
															"var expectedResult = 403;",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{base-url}}/device",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"device"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) DELETE on /devices",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a97ea15a-6bd3-47c9-b8e0-4a3a68fcb443",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-conflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{base-url}}/devices",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"devices"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "64c3a4b5-5131-4b07-a9f1-002fc0ac57df",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f1a98959-69ec-4c40-823c-fb633beda5d4",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "525aa66c-fdf1-439c-9b79-548b992c678a",
										"type": "text/javascript",
										"exec": [
											"var getDeviceSchema = {",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema\",",
											"  \"$id\": \"http://example.com/example.json\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"deviceId\": {",
											"      \"type\": \"string\",",
											"      \"format\": \"uuid\"",
											"    },",
											"    \"name\": {",
											"      \"type\": \"string\",",
											"      \"minLength\": 2,",
											"      \"maxLength\": 128",
											"    },",
											"    \"manufacturer\": {",
											"      \"type\": \"string\",",
											"      \"minLength\": 2,",
											"      \"maxLength\": 256",
											"    },",
											"    \"comment\": {",
											"      \"type\": \"string\",",
											"      \"minLength\": 2,",
											"      \"maxLength\": 1024",
											"    },",
											"    \"address\": {",
											"      \"type\": \"string\",",
											"      \"format\": \"ipv6\"",
											"    },",
											"    \"state\": {",
											"      \"type\": \"string\",",
											"      \"enum\": [\"on\", \"off\"]",
											"    },",
											"    \"availableControls\": {",
											"      \"type\": \"array\",",
											"      \"default\": [],",
											"      \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"          \"name\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"description\": {",
											"            \"type\": [\"string\", \"null\"]",
											"          },",
											"          \"controlType\": {",
											"            \"type\": \"string\",",
											"            \"enum\": [\"direct\", \"slider\", \"toggle\"]",
											"          },",
											"          \"value\": {",
											"            \"type\": [\"string\", \"null\"]",
											"          },",
											"          \"isManaged\": {",
											"            \"type\": \"boolean\"",
											"          }",
											"        },",
											"        \"required\": [",
											"          \"name\",",
											"          \"description\",",
											"          \"controlType\",",
											"          \"isManaged\"",
											"        ]",
											"      }",
											"    },",
											"    \"isRegistered\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"isGrouped\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"groupId\": {",
											"      \"type\": [\"string\", \"null\"],",
											"      \"format\": \"uuid\"",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"deviceId\",",
											"    \"name\",",
											"    \"manufacturer\",",
											"    \"comment\",",
											"    \"address\",",
											"    \"state\",",
											"    \"availableControls\",",
											"    \"isRegistered\",",
											"    \"isGrouped\"",
											"  ]",
											"};",
											"",
											"var getDevicesSchema = {",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema\",",
											"  \"$id\": \"http://example.com/example.json\",",
											"  \"type\": \"array\",",
											"  \"title\": \"Device Info\",",
											"  \"description\": \"Device Information\",",
											"  \"default\": [],",
											"  \"items\": {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"      \"deviceId\": {",
											"        \"type\": \"string\",",
											"        \"format\": \"uuid\"",
											"      },",
											"      \"name\": {",
											"        \"type\": \"string\",",
											"        \"minLength\": 2,",
											"        \"maxLength\": 128",
											"      },",
											"      \"manufacturer\": {",
											"        \"type\": \"string\",",
											"        \"minLength\": 2,",
											"        \"maxLength\": 256",
											"      },",
											"      \"comment\": {",
											"        \"type\": \"string\",",
											"        \"minLength\": 2,",
											"        \"maxLength\": 1024",
											"      },",
											"      \"address\": {",
											"        \"type\": \"string\",",
											"        \"format\": \"ipv6\"",
											"      },",
											"      \"state\": {",
											"        \"type\": \"string\",",
											"        \"enum\": [\"on\", \"off\"]",
											"      },",
											"      \"availableControls\": {",
											"        \"type\": \"array\",",
											"        \"default\": [],",
											"        \"items\": {",
											"          \"type\": \"object\",",
											"          \"properties\": {",
											"            \"name\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"description\": {",
											"              \"type\": [\"string\", \"null\"]",
											"            },",
											"            \"controlType\": {",
											"              \"type\": \"string\",",
											"              \"enum\": [\"direct\", \"slider\", \"toggle\"]",
											"            },",
											"            \"value\": {",
											"              \"type\": [\"string\", \"null\"]",
											"            },",
											"            \"isManaged\": {",
											"              \"type\": \"boolean\"",
											"            }",
											"          },",
											"          \"required\": [",
											"            \"name\",",
											"            \"description\",",
											"            \"controlType\",",
											"            \"isManaged\"",
											"          ]",
											"        }",
											"      },",
											"      \"isRegistered\": {",
											"        \"type\": \"boolean\"",
											"      },",
											"      \"isGrouped\": {",
											"        \"type\": \"boolean\"",
											"      },",
											"      \"groupId\": {",
											"        \"type\": [\"string\", \"null\"],",
											"        \"format\": \"uuid\"",
											"      }",
											"    },",
											"    \"required\": [",
											"      \"deviceId\",",
											"      \"name\",",
											"      \"manufacturer\",",
											"      \"comment\",",
											"      \"address\",",
											"      \"state\",",
											"      \"availableControls\",",
											"      \"isRegistered\",",
											"      \"isGrouped\"",
											"    ]",
											"  },",
											"  \"uniqueItems\": true",
											"};",
											"",
											"var createDeviceSchema = {",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema\",",
											"  \"$id\": \"http://example.com/example.json\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"deviceId\": {",
											"      \"type\": \"string\",",
											"      \"format\": \"uuid\"",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"deviceId\"",
											"  ]",
											"};",
											"",
											"pm.environment.set(\"getOneSchema\", getDeviceSchema);",
											"pm.environment.set(\"getAllSchema\", getDevicesSchema);",
											"pm.environment.set(\"creationSchema\", createDeviceSchema);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6842a26a-3190-48b1-8403-8d9c08ae07b9",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Groups",
							"item": [
								{
									"name": "Register a Device Group",
									"item": [
										{
											"name": "Register a Group",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "531a8146-0360-4e3e-a0bd-1fb6f920a97c",
														"exec": [
															"var uuId = null;",
															"if (pm.response.code === 201) {",
															"  var groupId = pm.response.json().groupId;",
															"  if (groupId != null) {",
															"    pm.collectionVariables.set(\"groupId\", groupId);",
															"    uuId = groupId;",
															"  }",
															"}",
															"if (uuId === null) {",
															"  var tempId = pm.collectionVariables.get(\"temp-id\");",
															"  pm.collectionVariables.set(\"groupId\", tempId);",
															"}",
															"",
															"var expectedResult = pm.environment.get(\"expected-create-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "78cac470-4fed-4055-82fd-79da8fbb904f",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"Test Group\",\n  \"description\": \"Group Test Descr\",\n  \"comment\": \"Group Test Comment\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/groups",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"groups"
													]
												}
											},
											"response": []
										},
										{
											"name": "Register a Group (Duplicate)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f287b9f5-b295-4ba3-9740-80baabf4a28b",
														"exec": [
															"var expectedResult = 409;",
															"pm.test(\"Status code is \" + 409 + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "6ed2faa1-df2e-4fb9-8fe3-7530c68f5107",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"Test Group\",\n  \"description\": \"Group Test Descr\",\n  \"comment\": \"Group Test Comment\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/groups",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"groups"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "7e662dd5-1665-46cb-9d7f-9a549cb16636",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "d7e56c8e-5fd8-4c16-9985-92cae42713aa",
												"type": "text/javascript",
												"exec": [
													"var creationSchema = pm.environment.get(\"creationSchema\");",
													"var Ajv  = require('ajv'),",
													"    ajv = new Ajv(),",
													"    schema = creationSchema;",
													"(pm.response.code===201 ? pm.test : pm.test.skip)('Reply Schema is valid', function () {",
													"    pm.expect(ajv.validate(schema, pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;",
													"});"
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "List Device Groups",
									"item": [
										{
											"name": "List all Groups",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "4f4c8a33-563e-4fd0-9c56-c0e70b4c3b9f",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-get-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base-url}}/groups",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"groups"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "e26c464b-130d-45d4-97c4-4a4ec2ab69cb",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f60cf812-4b15-4ac9-bd96-e59b354f5155",
												"type": "text/javascript",
												"exec": [
													"var getAllSchema = pm.environment.get(\"getAllSchema\");",
													"var Ajv  = require('ajv'),",
													"    ajv = new Ajv(),",
													"    schema = getAllSchema;",
													"(pm.response.code===200 ? pm.test : pm.test.skip)('Reply Schema is valid', function () {",
													"    pm.expect(ajv.validate(schema, pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;",
													"});"
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Get Specific Device Group",
									"item": [
										{
											"name": "List Specific Group",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "47275860-d9d8-4789-9bda-5b25731a7e79",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "6ca1ac6b-d653-46c0-a4e5-033af6d22b6d",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-get-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base-url}}/group/{{groupId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"group",
														"{{groupId}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ae935b9b-b7a2-435b-8c0d-f99a270a1ac8",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a7d47353-df3e-480f-a46b-e5ae032b33ee",
												"type": "text/javascript",
												"exec": [
													"var getOneSchema = pm.environment.get(\"getOneSchema\");",
													"var Ajv  = require('ajv'),",
													"    ajv = new Ajv(),",
													"    schema = getOneSchema;",
													"(pm.response.code===200 ? pm.test : pm.test.skip)('Reply Schema is valid', function () {",
													"    pm.expect(ajv.validate(schema, pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;",
													"});"
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Modify a Device Group",
									"item": [
										{
											"name": "Modify a Group",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "c4071a1b-f387-4d7e-8c4f-7ebc7a7e3b71",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "86fd6c5a-18ec-40d6-88a1-d9b5a93a1ca3",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-oper-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"group 1 name mod\",\n  \"description\": \"group 1 desc mod\",\n  \"comment\": \"comment mod\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/group/{{groupId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"group",
														"{{groupId}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "34ddb0ed-13d4-465c-84a4-faa1a41a7030",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e4b0ddde-d988-4c69-bf33-4c4605c40631",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Enable/Disable a Device Group",
									"item": [
										{
											"name": "Enable a Group",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "92fa0dce-e5c5-473a-b5ee-89e94c42aa19",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "8f1d7a50-bcce-410c-91e5-fefb875fe5e8",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-oper-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"isEnabled\": true\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/group/{{groupId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"group",
														"{{groupId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "DIsable a Group",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "e3cac447-ad24-4d32-9744-0ec2509f8357",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "d1b6c1e5-c6d6-4be4-9f6b-a0ec181f210a",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-oper-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"isEnabled\": false\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/group/{{groupId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"group",
														"{{groupId}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d1562118-3708-4193-a658-200f3610b2f3",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a2e96f84-2998-43a0-9a64-4240475956a7",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Register a Device to Group",
									"item": [
										{
											"name": "Add a Device to Group",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "3042f498-4eac-4bdb-8057-df7e246bca0b",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "41cc1d6a-ab2d-460f-8d98-a3d52585e79e",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-oper-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "{{base-url}}/group/{{groupId}}/device/{{deviceId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"group",
														"{{groupId}}",
														"device",
														"{{deviceId}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a945e766-2a58-4e25-adf5-a516e963e5f4",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "bc5200ef-6842-4ee7-a462-d56a46c2b442",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Unregister a Device from Group",
									"item": [
										{
											"name": "Remove a Device from Group",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "3a3b5a67-faa8-451a-8f2e-cef3ac20e587",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "6b220472-48d8-44c8-a3cc-13fd20d49cc9",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-oper-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{base-url}}/group/{{groupId}}/device/{{deviceId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"group",
														"{{groupId}}",
														"device",
														"{{deviceId}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "1e528fb7-f8ba-4daf-a031-e3676cda6dc4",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "67b1fa3e-b983-4707-94a4-e2a75253a162",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Delete a Device Group",
									"item": [
										{
											"name": "Delete a Group",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "b855caf3-2fc3-4383-b325-a4e2d9d0858e",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "ff8c05ff-5d8b-4737-9fff-a67db4e3b23e",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-oper-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{base-url}}/group/{{groupId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"group",
														"{{groupId}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a07675d3-c255-4dae-8f04-cdee53c85e3d",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "79dab317-3a53-4caa-937f-3b99d5393279",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Usupported Operations",
									"item": [
										{
											"name": "(unsupported) GET on /group",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "fe55cdf6-549f-4b0f-97b5-3d8a506ed507",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-noconflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base-url}}/group",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"group"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) POST on /group/*",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ec3f3d4f-3e43-4140-a336-1bc45debbc68",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-conflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"test\" : \"value\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/group/{{groupId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"group",
														"{{groupId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) PUT on /group",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "92ed6cca-7a68-4700-a07d-2bbb596cd8fa",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-noconflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"test\" : \"value\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/group",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"group"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) PUT on /groups",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "733102e1-90a4-496f-9de6-0f72b19d5616",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-conflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"test\" : \"value\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/groups",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"groups"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) PATCH on /group",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f516cc19-bd1c-4bee-b58c-d1ad3ab77fac",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-noconflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"test\" : \"value\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/group",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"group"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) PATCH on /groups",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "270fbe57-09b4-4bcb-95d5-2ea0f9be9c14",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-conflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"test\" : \"value\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/groups",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"groups"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) DELETE on /group",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "62f9bad8-4eac-4aba-baf4-5ae10db32f5b",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-noconflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{base-url}}/group",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"group"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) DELETE on /groups",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6a4e2242-f268-4aad-aa61-3739f1c0a4ef",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-conflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{base-url}}/groups",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"groups"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f35238ce-5469-4176-ae8e-21565b1e1fd7",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "4a894318-81e2-4867-a3eb-c392d4f182a1",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6c9e12bd-9a85-4a11-9684-c8301730e451",
										"type": "text/javascript",
										"exec": [
											"var getGroupsSchema = {",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema\",",
											"  \"$id\": \"http://example.com/example.json\",",
											"  \"type\": \"array\",",
											"  \"title\": \"Group Info\",",
											"  \"description\": \"Group Information\",",
											"  \"default\": [],",
											"  \"items\": {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"      \"groupId\": {",
											"        \"type\": \"string\",",
											"        \"format\": \"uuid\"",
											"      },",
											"      \"name\": {",
											"        \"type\": \"string\",",
											"        \"minLength\": 3,",
											"        \"maxLength\": 64",
											"      },",
											"      \"description\": {",
											"        \"type\": [\"string\", \"null\"],",
											"        \"minLength\": 0,",
											"        \"maxLength\": 128",
											"      },",
											"      \"comment\": {",
											"        \"type\": [\"string\", \"null\"],",
											"        \"minLength\": 0,",
											"        \"maxLength\": 128",
											"      },",
											"      \"isEnabled\": {",
											"        \"type\": \"boolean\",",
											"      },",
											"      \"devices\": {",
											"        \"type\": \"array\",",
											"        \"default\": [],",
											"        \"items\": {",
											"          \"type\": \"string\",",
											"          \"format\": \"uuid\"",
											"        }",
											"      }",
											"    },",
											"    \"required\": [",
											"      \"groupId\",",
											"      \"name\",",
											"      \"description\",",
											"      \"comment\",",
											"      \"isEnabled\",",
											"      \"devices\"",
											"    ]",
											"  },",
											"  \"uniqueItems\": true",
											"};",
											"",
											"var getGroupSchema = {",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema\",",
											"  \"$id\": \"http://example.com/example.json\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"groupId\": {",
											"      \"type\": \"string\",",
											"      \"format\": \"uuid\"",
											"    },",
											"    \"name\": {",
											"      \"type\": \"string\",",
											"      \"minLength\": 3,",
											"      \"maxLength\": 64",
											"    },",
											"    \"description\": {",
											"      \"type\": [\"string\", \"null\"],",
											"      \"minLength\": 0,",
											"      \"maxLength\": 128",
											"    },",
											"    \"comment\": {",
											"      \"type\": [\"string\", \"null\"],",
											"      \"minLength\": 0,",
											"      \"maxLength\": 128",
											"    },",
											"    \"isEnabled\": {",
											"      \"type\": \"boolean\",",
											"    },",
											"    \"devices\": {",
											"      \"type\": \"array\",",
											"      \"default\": [],",
											"      \"items\": {",
											"        \"type\": \"string\",",
											"        \"format\": \"uuid\"",
											"      }",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"groupId\",",
											"    \"name\",",
											"    \"description\",",
											"    \"comment\",",
											"    \"isEnabled\",",
											"    \"devices\"",
											"  ]",
											"};",
											"",
											"var createGroupSchema = {",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema\",",
											"  \"$id\": \"http://example.com/example.json\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"groupId\": {",
											"      \"type\": \"string\",",
											"      \"format\": \"uuid\"",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"groupId\"",
											"  ]",
											"};",
											"",
											"pm.environment.set(\"getOneSchema\", getGroupSchema);",
											"pm.environment.set(\"getAllSchema\", getGroupsSchema);",
											"pm.environment.set(\"creationSchema\", createGroupSchema);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e6f7c004-23b8-4e5c-870b-33ad27f62d5a",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Controls",
							"item": [
								{
									"name": "Register a Control",
									"item": [
										{
											"name": "Register a Control (Direct)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "c4bf9b0b-f2aa-4bcd-9e8f-a6199a55ce05",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "39923866-be29-47ba-8480-e75c85fa375e",
														"exec": [
															"var uuId = null;",
															"if (pm.response.code === 201) {",
															"  var controlId = pm.response.json().controlId;",
															"  if (controlId != null) {",
															"    pm.collectionVariables.set(\"controlId-direct\", controlId);",
															"    uuId = controlId;",
															"  }",
															"}",
															"if (uuId === null) {",
															"  var tempId = pm.collectionVariables.get(\"temp-id\");",
															"  pm.collectionVariables.set(\"controlId-direct\", tempId);",
															"}",
															"",
															"var expectedResult = pm.environment.get(\"expected-create-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"Channel\",\n  \"description\": \"Channel Control desc\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/controls/device/{{deviceId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"controls",
														"device",
														"{{deviceId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Register a Control (Slider)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "78f29f81-37af-424f-b114-3f69ecb620d0",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "ee2b90b2-db6e-4edc-8a20-5c5941287de0",
														"exec": [
															"var uuId = null;",
															"if (pm.response.code === 201) {",
															"  var controlId = pm.response.json().controlId;",
															"  if (controlId != null) {",
															"    pm.collectionVariables.set(\"controlId-slider\", controlId);",
															"    uuId = controlId;",
															"  }",
															"}",
															"if (uuId === null) {",
															"  var tempId = pm.collectionVariables.get(\"temp-id\");",
															"  pm.collectionVariables.set(\"controlId-slider\", tempId);",
															"}",
															"",
															"var expectedResult = pm.environment.get(\"expected-create-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"Volume\",\n  \"description\": \"Volume Control desc\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/controls/device/{{deviceId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"controls",
														"device",
														"{{deviceId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Register a Control (Toggle)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "7aa930cf-c163-4dc4-ad35-ff9a3fc55fd7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "2b485b69-3230-49a2-8a7a-81739c8b14f3",
														"exec": [
															"var uuId = null;",
															"if (pm.response.code === 201) {",
															"  var controlId = pm.response.json().controlId;",
															"  if (controlId != null) {",
															"    pm.collectionVariables.set(\"controlId-toggle\", controlId);",
															"    uuId = controlId;",
															"  }",
															"}",
															"if (uuId === null) {",
															"  var tempId = pm.collectionVariables.get(\"temp-id\");",
															"  pm.collectionVariables.set(\"controlId-toggle\", tempId);",
															"}",
															"",
															"var expectedResult = pm.environment.get(\"expected-create-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"Mute\",\n  \"description\": \"Mute Control desc\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/controls/device/{{deviceId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"controls",
														"device",
														"{{deviceId}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f70b23da-b393-4638-961a-d7200f7f5bdb",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "076629d8-1f17-41dc-883c-782b4a0a729e",
												"type": "text/javascript",
												"exec": [
													"var creationSchema = pm.environment.get(\"creationSchema\");",
													"var Ajv  = require('ajv'),",
													"    ajv = new Ajv(),",
													"    schema = creationSchema;",
													"(pm.response.code===201 ? pm.test : pm.test.skip)('Reply Schema is valid', function () {",
													"    pm.expect(ajv.validate(schema, pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;",
													"});"
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "List all Controls",
									"item": [
										{
											"name": "List all Controls",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6963a547-9794-4d93-b95d-ebb1e88698a6",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base-url}}/controls/devices",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"controls",
														"devices"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2ca678fc-381f-4fed-9028-e9108c0beb10",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "5286ba0a-4afc-4533-b4c5-7ac94ea02795",
												"type": "text/javascript",
												"exec": [
													"var expectedResult = pm.environment.get(\"expected-get-result\");",
													"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
													"    pm.response.to.have.status(expectedResult);",
													"});",
													"",
													"var getAllSchema = pm.environment.get(\"getAllSchema\");",
													"var Ajv  = require('ajv'),",
													"    ajv = new Ajv(),",
													"    schema = getAllSchema;",
													"(pm.response.code===200 ? pm.test : pm.test.skip)('Reply Schema is valid', function () {",
													"    pm.expect(ajv.validate(schema, pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;",
													"});"
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "List all Controls for Specified Device",
									"item": [
										{
											"name": "List all Controls for Specific Device",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "db9fe89a-b5f2-4be7-a395-9ba6e5e814eb",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "873f87aa-ba63-48a7-9460-61435d10431c",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base-url}}/controls/device/{{deviceId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"controls",
														"device",
														"{{deviceId}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "fbadcd83-ebae-4dbe-b71d-7fedc576f328",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "65df1fb4-a059-4722-ae5b-65a5edec313a",
												"type": "text/javascript",
												"exec": [
													"var expectedResult = pm.environment.get(\"expected-get-result\");",
													"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
													"    pm.response.to.have.status(expectedResult);",
													"});",
													"",
													"var getAllSchema = pm.environment.get(\"getAllSchema\");",
													"var Ajv  = require('ajv'),",
													"    ajv = new Ajv(),",
													"    schema = getAllSchema;",
													"(pm.response.code===200 ? pm.test : pm.test.skip)('Reply Schema is valid', function () {",
													"    pm.expect(ajv.validate(schema, pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;",
													"});"
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Set Controls",
									"item": [
										{
											"name": "Set Control - Direct",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "a83307c9-903b-4d2d-92f0-160b84536c63",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "53407950-cb90-4690-8eae-681bc2a37401",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-oper-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"newValue\": \"15\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/controls/device/direct/{{controlId-direct}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"controls",
														"device",
														"direct",
														"{{controlId-direct}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Set Control - Slider",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "2961289d-1097-48b3-a349-47c99dbe6aa7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "bdbf3fde-bd79-4513-84e0-fce027adc286",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-oper-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"direction\": \"up\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/controls/device/slider/{{controlId-slider}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"controls",
														"device",
														"slider",
														"{{controlId-slider}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Set Control - Toggle",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "2668d838-93ff-4659-a6cc-1df967010874",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "2d6441cd-b8ff-40ac-8b0a-85ec5b0b85a7",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-oper-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "{{base-url}}/controls/device/toggle/{{controlId-toggle}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"controls",
														"device",
														"toggle",
														"{{controlId-toggle}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "8853c857-7a07-4ee3-bcd8-c0f50ca1b533",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "95cd13b0-330e-4157-8493-b9efab3e79c2",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Modify a Control",
									"item": [
										{
											"name": "Modify a Control (Direct)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "745f2a2d-f44c-4804-84d6-d51f31241f02",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "7d357687-73f6-4bfb-a49f-1b9de1642188",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-oper-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"description\": \"new-description X\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/control/{{controlId-direct}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"control",
														"{{controlId-direct}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Modify a Control (Slider)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "14c57ff8-01dd-4e20-b042-bcb892b2002e",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "54a5e476-8d6a-43e2-8cda-243a3cf0d13b",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-oper-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"description\": \"new-description Y\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/control/{{controlId-slider}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"control",
														"{{controlId-slider}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Modify a Control (Toggle)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "cb79fe97-d549-4a18-a477-d3b9804b7fda",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "ec8e8ac8-2a2e-403f-80c1-01a91d0dfb14",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-oper-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"description\": \"new-description Z\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/control/{{controlId-toggle}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"control",
														"{{controlId-toggle}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6c3d183f-375f-45d3-b1d9-9785c11b4f7f",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "fb963cc6-f09a-4e85-b61b-3145037d499b",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Delete a Control",
									"item": [
										{
											"name": "Delete a Control (Direct)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "126dfa40-b89e-428c-a66f-2b0432e4d18a",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "ed97c2e1-ca4f-44e8-8d74-d31f6dc7fdb2",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-oper-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{base-url}}/control/{{controlId-direct}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"control",
														"{{controlId-direct}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete a Control (Slider)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "70dbce1a-d9c9-4d32-a1fd-4975e352cf80",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "be510268-8761-43f0-8a5b-77dfa145f295",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-oper-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{base-url}}/control/{{controlId-slider}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"control",
														"{{controlId-slider}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete a Control (Toggle)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "edd821ba-1852-41ae-bc09-83670f6b3035",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "e9e25275-8907-4ed1-a7ca-9c2d2c78dc86",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-oper-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{base-url}}/control/{{controlId-toggle}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"control",
														"{{controlId-toggle}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "e6470c5e-e712-46c7-a3c1-b065f85ca462",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2948ace4-b277-4bf1-936d-85a8e1cdbdab",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Usupported Operations",
									"item": [
										{
											"name": "(unsupported) GET on /control",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "7fc4aeed-bf94-4495-b6de-ad121727b5ca",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-noconflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base-url}}/control",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"control"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) POST on /control/*",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "afce7314-edb1-4b37-8938-e163822f39ed",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-conflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"test\" : \"value\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/control/{{controlId-direct}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"control",
														"{{controlId-direct}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) PUT on /control",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "60d2f75f-234a-4d01-a020-1e94d0e288e0",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-noconflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"test\" : \"value\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/control",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"control"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) PUT on /controls",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "91fcc91f-caf6-40d5-a5e0-013d40d66ac0",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-noconflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"test\" : \"value\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/controls",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"controls"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) PATCH on /control",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "674724d6-5dfd-4081-9288-c5981fae9d9e",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-noconflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"test\" : \"value\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/control",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"control"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) PATCH on /controls",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6a65a5bf-d478-448f-9815-c2596836d2ba",
														"exec": [
															"var expectedResult = 401;",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"test\" : \"value\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/controls",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"controls"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) DELETE on /control",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5e558b22-d328-4d01-a48a-1ced924bcfa2",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-noconflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{base-url}}/control",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"control"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) DELETE on /controls",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ce5e120c-901c-49a6-9b66-1ccd37fa45fa",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-noconflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{base-url}}/controls",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"controls"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "1fd1e467-7e71-4313-8b92-ad113f9fb302",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "1bdc41bf-ff72-4d49-86a3-6534015a4cfe",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "fefc8729-110b-4445-aafb-9fccd8c1d2a6",
										"type": "text/javascript",
										"exec": [
											"var getControlsSchema = {",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema\",",
											"  \"$id\": \"http://example.com/example.json\",",
											"  \"type\": \"array\",",
											"  \"title\": \"Control Info\",",
											"  \"description\": \"Control Information\",",
											"  \"default\": [],",
											"  \"items\": {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"      \"deviceId\": {",
											"        \"type\": \"string\",",
											"        \"format\": \"uuid\"",
											"      },",
											"      \"controlId\": {",
											"        \"type\": \"string\",",
											"        \"format\": \"uuid\"",
											"      },",
											"      \"name\": {",
											"        \"type\": \"string\",",
											"        \"minLength\": 2,",
											"        \"maxLength\": 128",
											"      },",
											"      \"description\": {",
											"        \"type\": [\"string\", \"null\"],",
											"        \"minLength\": 2,",
											"        \"maxLength\": 1024",
											"      },",
											"      \"currentValue\": {",
											"        \"type\": [\"string\", \"null\"],",
											"        \"minLength\": 1,",
											"        \"maxLength\": 128",
											"      }",
											"    },",
											"    \"required\": [",
											"      \"deviceId\",",
											"      \"controlId\",",
											"      \"name\",",
											"      \"description\"",
											"    ]",
											"  },",
											"  \"uniqueItems\": true",
											"};",
											"",
											"var getControlSchema = {",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema\",",
											"  \"$id\": \"http://example.com/example.json\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"deviceId\": {",
											"      \"type\": \"string\",",
											"      \"format\": \"uuid\"",
											"    },",
											"    \"controlId\": {",
											"      \"type\": \"string\",",
											"      \"format\": \"uuid\"",
											"    },",
											"    \"name\": {",
											"      \"type\": \"string\",",
											"      \"minLength\": 2,",
											"      \"maxLength\": 128",
											"    },",
											"    \"description\": {",
											"      \"type\": [\"string\", \"null\"],",
											"      \"minLength\": 0,",
											"      \"maxLength\": 128",
											"    },",
											"    \"currentValue\": {",
											"      \"type\": [\"string\", \"null\"],",
											"      \"minLength\": 1,",
											"      \"maxLength\": 128",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"deviceId\",",
											"    \"controlId\",",
											"    \"name\",",
											"    \"description\"",
											"  ]",
											"};",
											"",
											"var createControlSchema = {",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema\",",
											"  \"$id\": \"http://example.com/example.json\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"controlId\": {",
											"      \"type\": \"string\",",
											"      \"format\": \"uuid\"",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"controlId\"",
											"  ]",
											"};",
											"",
											"pm.environment.set(\"getOneSchema\", getControlSchema);",
											"pm.environment.set(\"getAllSchema\", getControlsSchema);",
											"pm.environment.set(\"creationSchema\", createControlSchema);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "107de8dd-1028-4afc-863e-146ab29ab52c",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Logs",
							"item": [
								{
									"name": "List all Controller Logs",
									"item": [
										{
											"name": "List all Controller Logs",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "7c1dd0da-d286-4ce7-a2d5-223d0497f239",
														"exec": [
															"var simBaseUrl = pm.collectionVariables.get(\"sim-url\");",
															"",
															"//Simulator - Create a List of 2 Controller Logs",
															"var simAction = pm.collectionVariables.get(\"sim-register-control-logs\");",
															"var options = {",
															"  'method': 'POST',",
															"  'url': simBaseUrl + \"/\" + simAction,",
															"  'header': {",
															"    'Content-Type': 'application/json',",
															"    'Accept': 'application/json'",
															"  }",
															"};",
															"pm.sendRequest(options, function (err, response) {",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "1aceb434-bfd3-4fb1-821e-4f0e5c91a138",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-get-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base-url}}/logs/controller",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"logs",
														"controller"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "fe94db6a-f183-4ad0-998a-9d642a7ff11a",
												"type": "text/javascript",
												"exec": [
													"var getLogsSchema = {",
													"  \"$schema\": \"http://json-schema.org/draft-07/schema\",",
													"  \"$id\": \"http://example.com/example.json\",",
													"  \"type\": \"array\",",
													"  \"title\": \"Controller Log Info\",",
													"  \"description\": \"Controller Log Information\",",
													"  \"default\": [],",
													"  \"items\": {",
													"    \"type\": \"object\",",
													"    \"properties\": {",
													"      \"timestamp\": {",
													"        \"type\": \"string\",",
													"        \"format\": \"date-time\"",
													"      },",
													"      \"level\": {",
													"        \"type\": \"string\",",
													"        \"enum\": [\"critical\", \"error\", \"warning\", \"info\", \"debug\", \"trace\" ]",
													"      },",
													"      \"title\": {",
													"        \"type\": \"string\",",
													"        \"minLength\": 4",
													"      },",
													"      \"message\": {",
													"        \"type\": \"string\",",
													"        \"minLength\": 8,",
													"      },",
													"      \"logId\": {",
													"        \"type\": \"string\",",
													"        \"format\": \"uuid\"",
													"      }",
													"    },",
													"    \"required\": [",
													"      \"timestamp\",",
													"      \"level\",",
													"      \"title\",",
													"      \"message\",",
													"      \"logId\"",
													"    ]",
													"  },",
													"  \"uniqueItems\": true",
													"};",
													"",
													"pm.environment.set(\"getAllSchema\", getLogsSchema);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f6808626-3050-48f8-a50a-43967f20f270",
												"type": "text/javascript",
												"exec": [
													"var getAllSchema = pm.environment.get(\"getAllSchema\");",
													"var Ajv  = require('ajv'),",
													"    ajv = new Ajv(),",
													"    schema = getAllSchema;",
													"(pm.response.code===200 ? pm.test : pm.test.skip)('Reply Schema is valid', function () {",
													"    pm.expect(ajv.validate(schema, pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;",
													"});"
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "List all Device Logs",
									"item": [
										{
											"name": "List all Device Logs",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "7327d881-81b3-4f7a-8a95-fdf606e1ae5b",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-get-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "cbc61133-a2a6-4978-a3df-e00d89087ac2",
														"exec": [
															"var simBaseUrl = pm.collectionVariables.get(\"sim-url\");",
															"",
															"//Simulator - Create a List of 2 Device Logs",
															"var simAction = pm.collectionVariables.get(\"sim-register-device-logs\");",
															"var devId = pm.collectionVariables.get(\"deviceId\");",
															"var options = {",
															"  'method': 'POST',",
															"  'url': simBaseUrl + \"/\" + simAction + \"/\" + devId,",
															"  'header': {",
															"    'Content-Type': 'application/json',",
															"    'Accept': 'application/json'",
															"  }",
															"};",
															"pm.sendRequest(options, function (err, response) {",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base-url}}/logs/devices",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"logs",
														"devices"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "21afe583-9c8f-484f-81ce-390478a66d6a",
												"type": "text/javascript",
												"exec": [
													"var getLogsSchema = {",
													"  \"$schema\": \"http://json-schema.org/draft-07/schema\",",
													"  \"$id\": \"http://example.com/example.json\",",
													"  \"type\": \"array\",",
													"  \"title\": \"Device Log Info\",",
													"  \"description\": \"Device Log Information\",",
													"  \"default\": [],",
													"  \"items\": {",
													"    \"type\": \"object\",",
													"    \"properties\": {",
													"      \"timestamp\": {",
													"        \"type\": \"string\",",
													"        \"format\": \"date-time\"",
													"      },",
													"      \"level\": {",
													"        \"type\": \"string\",",
													"        \"enum\": [\"critical\", \"error\", \"warning\", \"info\", \"debug\", \"trace\" ]",
													"      },",
													"      \"deviceId\": {",
													"        \"type\": \"string\",",
													"        \"format\": \"uuid\"",
													"      },",
													"      \"title\": {",
													"        \"type\": \"string\",",
													"        \"minLength\": 4",
													"      },",
													"      \"message\": {",
													"        \"type\": \"string\",",
													"        \"minLength\": 8,",
													"      },",
													"      \"logId\": {",
													"        \"type\": \"string\",",
													"        \"format\": \"uuid\"",
													"      }",
													"    },",
													"    \"required\": [",
													"      \"timestamp\",",
													"      \"level\",",
													"      \"title\",",
													"      \"message\",",
													"      \"logId\"",
													"    ]",
													"  },",
													"  \"uniqueItems\": true",
													"};",
													"",
													"pm.environment.set(\"getAllSchema\", getLogsSchema);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "1a91070c-8f1d-4c81-9964-60ef2c19d2b8",
												"type": "text/javascript",
												"exec": [
													"var getAllSchema = pm.environment.get(\"getAllSchema\");",
													"var Ajv  = require('ajv'),",
													"    ajv = new Ajv(),",
													"    schema = getAllSchema;",
													"(pm.response.code===200 ? pm.test : pm.test.skip)('Reply Schema is valid', function () {",
													"    pm.expect(ajv.validate(schema, pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;",
													"});"
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "List all Logs for Specific Device",
									"item": [
										{
											"name": "List all Logs for Specified Device",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "097fd1a3-34a3-4e08-83e6-85ee1ff2b7a2",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "00f485dd-229a-4539-b871-eb0c047bd064",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-get-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base-url}}/logs/device/{{deviceId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"logs",
														"device",
														"{{deviceId}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "dada692e-a5f0-42a8-a145-f30b19f4c013",
												"type": "text/javascript",
												"exec": [
													"var getLogsSchema = {",
													"  \"$schema\": \"http://json-schema.org/draft-07/schema\",",
													"  \"$id\": \"http://example.com/example.json\",",
													"  \"type\": \"array\",",
													"  \"title\": \"Device Log Info\",",
													"  \"description\": \"Device Log Information\",",
													"  \"default\": [],",
													"  \"items\": {",
													"    \"type\": \"object\",",
													"    \"properties\": {",
													"      \"timestamp\": {",
													"        \"type\": \"string\",",
													"        \"format\": \"date-time\"",
													"      },",
													"      \"level\": {",
													"        \"type\": \"string\",",
													"        \"enum\": [\"critical\", \"error\", \"warning\", \"info\", \"debug\", \"trace\" ]",
													"      },",
													"      \"deviceId\": {",
													"        \"type\": \"string\",",
													"        \"format\": \"uuid\"",
													"      },",
													"      \"title\": {",
													"        \"type\": \"string\",",
													"        \"minLength\": 4",
													"      },",
													"      \"message\": {",
													"        \"type\": \"string\",",
													"        \"minLength\": 8,",
													"      },",
													"      \"logId\": {",
													"        \"type\": \"string\",",
													"        \"format\": \"uuid\"",
													"      }",
													"    },",
													"    \"required\": [",
													"      \"timestamp\",",
													"      \"level\",",
													"      \"title\",",
													"      \"message\",",
													"      \"logId\"",
													"    ]",
													"  },",
													"  \"uniqueItems\": true",
													"};",
													"",
													"pm.environment.set(\"getAllSchema\", getLogsSchema);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "71395a88-bc20-47db-8dde-41b5183a2fc7",
												"type": "text/javascript",
												"exec": [
													"var getFilteredSchema = pm.environment.get(\"getAllSchema\");",
													"var Ajv  = require('ajv'),",
													"    ajv = new Ajv(),",
													"    schema = getFilteredSchema;",
													"(pm.response.code===200 ? pm.test : pm.test.skip)('Reply Schema is valid', function () {",
													"    pm.expect(ajv.validate(schema, pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;",
													"});"
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Delete Controller Logs",
									"item": [
										{
											"name": "Delete Controller Logs",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "d2acef73-c3fb-4d84-909e-633eabf2d454",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "8f2cc062-de3c-4d9d-a38f-07ba24dca04a",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-oper-admin-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{base-url}}/logs/controller",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"logs",
														"controller"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a5ce0454-6756-41bf-8609-b2766a8c4fac",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "9729ce9c-2dd0-469d-850e-9e6a5b3d0de0",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Delete Logs for Specific Device",
									"item": [
										{
											"name": "Delete Logs for Specified Device",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "b4fd11fb-5714-4fab-9f14-86a678963731",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "8a9f4748-b4cf-42a6-8e6c-58a5edd99838",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-oper-admin-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{base-url}}/logs/device/{{deviceId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"logs",
														"device",
														"{{deviceId}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "35ebda52-05b8-44fe-bb41-1747c064f2e9",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "dbf3aadc-552b-4710-9713-ede899ec95fa",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Delete all Device Logs",
									"item": [
										{
											"name": "Delete Logs for all Devices",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8280c8b5-8c5f-4b58-b409-1aad4bbe3925",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-oper-admin-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "8f82f7ce-d974-45e9-bde5-634ce20eff89",
														"exec": [
															"var simBaseUrl = pm.collectionVariables.get(\"sim-url\");",
															"",
															"//Simulator - Create a List of 2 Device Logs",
															"var simAction = pm.collectionVariables.get(\"sim-register-device-logs\");",
															"var devId = pm.collectionVariables.get(\"deviceId\");",
															"var options = {",
															"  'method': 'POST',",
															"  'url': simBaseUrl + \"/\" + simAction + \"/\" + devId,",
															"  'header': {",
															"    'Content-Type': 'application/json',",
															"    'Accept': 'application/json'",
															"  }",
															"};",
															"pm.sendRequest(options, function (err, response) {",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{base-url}}/logs/devices",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"logs",
														"devices"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "326a1277-35a5-4307-9ecb-a0eca87786ad",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "5de82710-7cb7-499a-87b0-0aae1c310d53",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Unsupported Operations",
									"item": [
										{
											"name": "(unsupported) POST on /logs/controller",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "cf421486-12ba-40d6-9702-d13e3ae064d1",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-conflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{base-url}}/logs/controller",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"logs",
														"controller"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) PUT on /logs/controller",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "56e16dd8-dce5-4c5a-a6ed-e5cf34470fa2",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-conflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{base-url}}/logs/controller",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"logs",
														"controller"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) PATCH on /logs/controller",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c62e8a44-1658-41b7-b676-d95cdf9860fc",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-conflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "{{base-url}}/logs/controller",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"logs",
														"controller"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) POST on /logs/device/*",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6c8e4707-2a44-4d32-aa31-9de4ac088a88",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-conflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{base-url}}/logs/device/{{deviceId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"logs",
														"device",
														"{{deviceId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) POST on /logs/devices",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e8e68e55-4745-49f7-830d-88bff4c2587e",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-conflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{base-url}}/logs/devices",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"logs",
														"devices"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) PUT on /logs/device/*",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3ecb6fe2-0883-45ee-b7de-2582a9f160d0",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-conflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{base-url}}/logs/device/{{deviceId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"logs",
														"device",
														"{{deviceId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) PUT on /logs/devices",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "53400d7d-3e63-401b-928b-fe580ac62f44",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-conflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{base-url}}/logs/devices",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"logs",
														"devices"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) PATCH on /logs/device/*",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "56aeafd6-a369-47d6-922e-f3833caf1524",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-conflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "{{base-url}}/logs/device/{{deviceId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"logs",
														"device",
														"{{deviceId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) PATCH on /logs/devices",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c3a8debd-ea1a-42ed-b350-4d1d3ced6f47",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-conflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "{{base-url}}/logs/devices",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"logs",
														"devices"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) GET on /logs/device",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "906b7358-2c90-494c-ac24-7cca0c628bcc",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-noconflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base-url}}/logs/device",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"logs",
														"device"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) DELETE on /logs/device",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e7e6c631-3097-4dca-86d1-c0b436d06446",
														"exec": [
															"var expectedResult = 403;",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{base-url}}/logs/device",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"logs",
														"device"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "59760134-7fe5-49ce-a558-8e7c4ba33410",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "55f74071-9877-49f1-95d1-7d66fba8bacb",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Timers",
							"item": [
								{
									"name": "PREP",
									"item": [
										{
											"name": "[PREP] Get valid controlId (direct)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "833bce31-8e33-466b-958c-0bcf61dd4683",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "2bb02183-e9ff-4eee-9df9-5abe86426acf",
														"exec": [
															"var uuId = null;",
															"if (pm.response.code === 201) {",
															"  var controlId = pm.response.json().controlId;",
															"  if (controlId != null) {",
															"    pm.collectionVariables.set(\"controlId-direct\", controlId);",
															"    uuId = controlId;",
															"  }",
															"}",
															"if (uuId === null) {",
															"  var tempId = pm.collectionVariables.get(\"temp-id\");",
															"  pm.collectionVariables.set(\"controlId-direct\", tempId);",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "accessToken",
															"value": "{{admin-prep-access-token}}",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"Channel\",\n  \"description\": \"Channel Control desc\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/controls/device/{{deviceId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"controls",
														"device",
														"{{deviceId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[PREP] Get valid controlId (slider)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "772b76e3-1008-4425-8a18-c7db512753b7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "9f464bd6-b823-49a6-be28-11164f690e07",
														"exec": [
															"var uuId = null;",
															"if (pm.response.code === 201) {",
															"  var controlId = pm.response.json().controlId;",
															"  if (controlId != null) {",
															"    pm.collectionVariables.set(\"controlId-slider\", controlId);",
															"    uuId = controlId;",
															"  }",
															"}",
															"if (uuId === null) {",
															"  var tempId = pm.collectionVariables.get(\"temp-id\");",
															"  pm.collectionVariables.set(\"controlId-slider\", tempId);",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "accessToken",
															"value": "{{admin-prep-access-token}}",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"Volume\",\n  \"description\": \"Volume Control desc\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/controls/device/{{deviceId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"controls",
														"device",
														"{{deviceId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[PREP] Get valid controlId (toggle)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "37e5120d-6d7f-4fdf-a49a-f477a5184bbe",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "c7f4cb46-7a0b-4753-bf0e-575bf34c883b",
														"exec": [
															"var uuId = null;",
															"if (pm.response.code === 201) {",
															"  var controlId = pm.response.json().controlId;",
															"  if (controlId != null) {",
															"    pm.collectionVariables.set(\"controlId-toggle\", controlId);",
															"    uuId = controlId;",
															"  }",
															"}",
															"if (uuId === null) {",
															"  var tempId = pm.collectionVariables.get(\"temp-id\");",
															"  pm.collectionVariables.set(\"controlId-toggle\", tempId);",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "oauth2",
													"oauth2": [
														{
															"key": "accessToken",
															"value": "{{admin-prep-access-token}}",
															"type": "string"
														},
														{
															"key": "addTokenTo",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"Mute\",\n  \"description\": \"Mute Control desc\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/controls/device/{{deviceId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"controls",
														"device",
														"{{deviceId}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Register a Timer",
									"item": [
										{
											"name": "Register a Timer",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0696e712-6b13-46e7-bb77-6081ccbd4f59",
														"exec": [
															"var uuId = null;",
															"if (pm.response.code === 201) {",
															"  var timerId = pm.response.json().timerId;",
															"  if (timerId != null) {",
															"    pm.collectionVariables.set(\"timerId\", timerId);",
															"    uuId = timerId;",
															"  }",
															"}",
															"if (uuId === null) {",
															"  var tempId = pm.collectionVariables.get(\"temp-id\");",
															"  pm.collectionVariables.set(\"timerId\", tempId);",
															"}",
															"",
															"var expectedResult = pm.environment.get(\"expected-create-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "e8f1f250-fddb-457a-9b12-2ddb802f3336",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"timerType\": \"interval\",\n  \"intervalPattern\": \"daily\",\n  \"startDateTime\": \"2020-11-05T20:40:34.800Z\",\n  \"endDateTime\": \"2020-12-05T20:40:34.800Z\",\n  \"intervalPeriod\": 1,\n  \"setDateTimes\": [],\n  \"timerTarget\": [\n    {\n      \"controlId\": \"{{controlId-direct}}\",\n      \"action\": \"direct\",\n      \"directValue\": \"15\"\n    },\n    {\n      \"controlId\": \"{{controlId-slider}}\",\n      \"action\": \"slider-up\"\n    },\n    {\n      \"controlId\": \"{{controlId-toggle}}\",\n      \"action\": \"toggle\"\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/timers",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"timers"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "9921247f-f082-4f71-b8fa-453c9b937db0",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e0986b62-7eea-4db2-806f-48e751f0c294",
												"type": "text/javascript",
												"exec": [
													"var creationSchema = pm.environment.get(\"creationSchema\");",
													"var Ajv  = require('ajv'),",
													"    ajv = new Ajv(),",
													"    schema = creationSchema;",
													"(pm.response.code===201 ? pm.test : pm.test.skip)('Reply Schema is valid', function () {",
													"    pm.expect(ajv.validate(schema, pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;",
													"});"
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "List Timers",
									"item": [
										{
											"name": "List all Timers",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8a24293d-63c0-4d3f-9f22-fb9b98b4a650",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-get-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base-url}}/timers",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"timers"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "0eda6682-b39f-4311-bf20-0acdf0262ed6",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ffae6d9c-c536-4f4c-abdd-558283cf92cd",
												"type": "text/javascript",
												"exec": [
													"var getAllSchema = pm.environment.get(\"getAllSchema\");",
													"var Ajv  = require('ajv'),",
													"    ajv = new Ajv(),",
													"    schema = getAllSchema;",
													"(pm.response.code===200 ? pm.test : pm.test.skip)('Reply Schema is valid', function () {",
													"    pm.expect(ajv.validate(schema, pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;",
													"});"
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Get Specific Timer Info",
									"item": [
										{
											"name": "List Specific Timer",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "b8b6a82e-b224-4501-8cd7-260eb48066a4",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "9891166f-5ebd-44a8-89a9-675f2b88a8e3",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-get-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base-url}}/timer/{{timerId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"timer",
														"{{timerId}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "9300e221-4593-411a-8504-27a5ddefbeae",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "d8f95c21-70b5-4476-b574-abee04cdcd0b",
												"type": "text/javascript",
												"exec": [
													"var getOneSchema = pm.environment.get(\"getOneSchema\");",
													"var Ajv  = require('ajv'),",
													"    ajv = new Ajv(),",
													"    schema = getOneSchema;",
													"(pm.response.code===200 ? pm.test : pm.test.skip)('Reply Schema is valid', function () {",
													"    pm.expect(ajv.validate(schema, pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;",
													"});"
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Modify a Timer",
									"item": [
										{
											"name": "Modify a Timer",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "c5dd424d-3488-4c4a-b1b6-c6e4658d949f",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "f5cb41f7-a14a-4841-b36c-b6cd600745c7",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-oper-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"timerType\": \"interval\",\n  \"intervalPattern\": \"daysPerWeek\",\n  \"startDateTime\": \"2020-11-05T20:40:34.800Z\",\n  \"endDateTime\": \"2020-12-05T20:40:34.800Z\",\n  \"intervalPeriod\": 2,\n  \"setDateTimes\": [],\n  \"timerTarget\": [\n    {\n      \"controlId\": \"{{controlId-direct}}\",\n      \"action\": \"direct\",\n      \"directValue\": \"15\"\n    },\n    {\n      \"controlId\": \"{{controlId-slider}}\",\n      \"action\": \"slider-up\"\n    },\n    {\n      \"controlId\": \"{{controlId-toggle}}\",\n      \"action\": \"toggle\"\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/timer/{{timerId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"timer",
														"{{timerId}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "fceaa93c-fdf6-49d6-9b61-10219b571be6",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "56fa149a-9463-4b6d-aac0-6157402af47c",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Set Action to Timer",
									"item": [
										{
											"name": "Set Action to Timer",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "d3f9ddba-cab8-4c68-9369-36306f38bb7b",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "c5c7e692-a85b-4d18-8d33-9284ece5a300",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-oper-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"timerTarget\": [\n    {\n      \"controlId\": \"{{controlId-direct}}\",\n      \"action\": \"direct\",\n      \"directValue\": \"3\"\n    },\n    {\n      \"controlId\": \"{{controlId-slider}}\",\n      \"action\": \"slider-down\"\n    },\n    {\n      \"controlId\": \"{{controlId-toggle}}\",\n      \"action\": \"toggle\"\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/timer/{{timerId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"timer",
														"{{timerId}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "8a466ef9-bc13-47ce-a64a-f1c95556e90a",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "35f61c1a-8c19-462d-b2cb-8ca64eaf5d95",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Delete a Timer",
									"item": [
										{
											"name": "Delete a Timer",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "1e183985-c3c0-4ea5-8056-149c024adbaf",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "d67e481a-4942-4414-b148-e75556cdf2d9",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-oper-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{base-url}}/timer/{{timerId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"timer",
														"{{timerId}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2c94bec7-496a-44ac-9d52-c8b64d0ad3f3",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "36a239e2-830d-447b-b380-26e51eac0c75",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Usupported Operations",
									"item": [
										{
											"name": "(unsupported) GET on /timer",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "00264853-79cb-4e70-a5a3-e96e74f3bc33",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-noconflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base-url}}/timer",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"timer"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) POST on /timer/*",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b06bef7e-9c22-40fc-9659-220e65f26023",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-conflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"test\" : \"value\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/timer/{{timerId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"timer",
														"{{timerId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) PUT on /timer",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5681247b-f005-49e5-9089-c654b1433dd1",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-noconflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"test\" : \"value\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/timer",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"timer"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) PUT on /timers",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b6886a4c-43b8-4e69-9d1b-ae735469c868",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-conflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"test\" : \"value\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/timers",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"timers"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) PATCH on /timer",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "4adf0986-e2f7-4ae7-a2bc-96563afcb7d4",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-noconflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"test\" : \"value\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/timer",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"timer"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) PATCH on /timers",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "42cbf8a3-b6ca-4f61-9977-8b56eb19d9ca",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-conflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"test\" : \"value\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/timers",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"timers"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) DELETE on /timer",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "4eb5c446-7adb-44b5-9056-ca7e1834d3e3",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-noconflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{base-url}}/timer",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"timer"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) DELETE on /timers",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "96456595-1414-4f4d-966c-9f1dd2073c4f",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-conflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{base-url}}/timers",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"timers"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ef759d24-2a9f-4913-bcfe-e17b98dd2e78",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "30ecb929-3e12-4846-bb98-6e9773bcd0b3",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c0a942b6-3567-4cca-9a09-8476df6c1c76",
										"type": "text/javascript",
										"exec": [
											"var getTimersSchema = {",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema\",",
											"  \"$id\": \"http://example.com/example.json\",",
											"  \"type\": \"array\",",
											"  \"title\": \"Timer Info\",",
											"  \"description\": \"Timer Information\",",
											"  \"default\": [],",
											"  \"items\": {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"      \"timerId\": {",
											"        \"type\": \"string\",",
											"        \"format\": \"uuid\"",
											"      },",
											"      \"timerType\": {",
											"        \"type\": \"string\",",
											"        \"enum\": [\"once\", \"interval\"]",
											"      },",
											"      \"intervalPattern\": {",
											"        \"type\": [\"string\", \"null\"],",
											"        \"enum\": [\"timesPerDay\", \"daily\", \"daysPerWeek\", \"weekly\", \"daysPerMonth\", \"monthly\", \"daysPerYear\", \"yearly\", \"custom\"]",
											"      },",
											"      \"startDateTime\": {",
											"        \"type\": \"string\",",
											"        \"format\": \"date-time\"",
											"      },",
											"      \"endDateTime\": {",
											"        \"type\": [\"string\", \"null\"],",
											"        \"format\": \"date-time\"",
											"      },",
											"      \"intervalPeriod\": {",
											"        \"type\": \"integer\",",
											"        \"minimum\": 0,",
											"        \"maximum\": 365",
											"      },",
											"      \"setDateTimes\": {",
											"        \"type\": \"array\",",
											"        \"default\": [],",
											"        \"items\": {",
											"          \"type\": \"string\",",
											"          \"format\": \"date-time\"",
											"        }",
											"      },",
											"      \"timerTarget\": {",
											"        \"type\": \"array\",",
											"        \"default\": [],",
											"        \"items\": {",
											"          \"type\": \"object\",",
											"          \"properties\": {",
											"            \"controlId\": {",
											"              \"type\": \"string\",",
											"              \"format\": \"uuid\"",
											"            },",
											"            \"action\": {",
											"              \"type\": \"string\",",
											"              \"enum\": [\"switch-on\", \"switch-off\", \"direct\", \"slider-up\", \"slider-down\", \"toggle\"]",
											"            },",
											"            \"directValue\": {",
											"              \"type\": [\"string\", \"null\"],",
											"              \"minLength\": 1,",
											"              \"maxLength\": 128",
											"            }",
											"          },",
											"          \"required\": [",
											"            \"controlId\",",
											"            \"action\"",
											"          ]",
											"        }",
											"      }",
											"    },",
											"    \"required\": [",
											"      \"timerId\",",
											"      \"timerType\",",
											"      \"timerTarget\"",
											"    ]",
											"  },",
											"  \"uniqueItems\": true",
											"};",
											"",
											"var getTimerSchema = {",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema\",",
											"  \"$id\": \"http://example.com/example.json\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"timerId\": {",
											"      \"type\": \"string\",",
											"      \"format\": \"uuid\"",
											"    },",
											"    \"timerType\": {",
											"      \"type\": \"string\",",
											"      \"enum\": [\"once\", \"interval\"]",
											"    },",
											"    \"intervalPattern\": {",
											"      \"type\": [\"string\", \"null\"],",
											"      \"enum\": [\"timesPerDay\", \"daily\", \"daysPerWeek\", \"weekly\", \"daysPerMonth\", \"monthly\", \"daysPerYear\", \"yearly\", \"custom\"]",
											"    },",
											"    \"startDateTime\": {",
											"      \"type\": \"string\",",
											"      \"format\": \"date-time\"",
											"    },",
											"    \"endDateTime\": {",
											"      \"type\": [\"string\", \"null\"],",
											"      \"format\": \"date-time\"",
											"    },",
											"    \"intervalPeriod\": {",
											"      \"type\": \"integer\",",
											"      \"minimum\": 0,",
											"      \"maximum\": 365",
											"    },",
											"    \"setDateTimes\": {",
											"      \"type\": \"array\",",
											"      \"default\": [],",
											"      \"items\": {",
											"        \"type\": \"string\",",
											"        \"format\": \"date-time\"",
											"      }",
											"    },",
											"    \"timerTarget\": {",
											"      \"type\": \"array\",",
											"      \"default\": [],",
											"      \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"          \"controlId\": {",
											"            \"type\": \"string\",",
											"            \"format\": \"uuid\"",
											"          },",
											"          \"action\": {",
											"            \"type\": \"string\",",
											"            \"enum\": [\"switch-on\", \"switch-off\", \"direct\", \"slider-up\", \"slider-down\", \"toggle\"]",
											"          },",
											"          \"directValue\": {",
											"            \"type\": [\"string\", \"null\"],",
											"            \"minLength\": 1,",
											"            \"maxLength\": 128",
											"          }",
											"        },",
											"        \"required\": [",
											"          \"controlId\",",
											"          \"action\"",
											"        ]",
											"      }",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"timerId\",",
											"    \"timerType\",",
											"    \"timerTarget\"",
											"  ]",
											"};",
											"",
											"var createTimerSchema = {",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema\",",
											"  \"$id\": \"http://example.com/example.json\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"timerId\": {",
											"      \"type\": \"string\",",
											"      \"format\": \"uuid\"",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"timerId\"",
											"  ]",
											"};",
											"",
											"pm.environment.set(\"getOneSchema\", getTimerSchema);",
											"pm.environment.set(\"getAllSchema\", getTimersSchema);",
											"pm.environment.set(\"creationSchema\", createTimerSchema);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b7944e89-490a-4550-8c31-e5e5932723fb",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Zones",
							"item": [
								{
									"name": "Register a Zone",
									"item": [
										{
											"name": "Register a Zone",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e5f51b64-c225-44de-bbb4-079216d45c58",
														"exec": [
															"var uuId = null;",
															"if (pm.response.code === 201) {",
															"  var zoneId = pm.response.json().zoneId;",
															"  if (zoneId != null) {",
															"    pm.collectionVariables.set(\"zoneId\", zoneId);",
															"    uuId = zoneId;",
															"  }",
															"}",
															"if (uuId === null) {",
															"  var tempId = pm.collectionVariables.get(\"temp-id\");",
															"  pm.collectionVariables.set(\"zoneId\", tempId);",
															"}",
															"",
															"var expectedResult = pm.environment.get(\"expected-create-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"Speakers - Living Room\",\n  \"comment\": \"All Speakers grouped in the Living Room\",\n  \"deviceIds\": [\n    \"{{deviceId}}\"\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/zones",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"zones"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "cd90ea7b-46fd-4ce0-9832-d852f6cf543f",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "420cf157-6e42-473a-a161-d93f086c9315",
												"type": "text/javascript",
												"exec": [
													"var creationSchema = pm.environment.get(\"creationSchema\");",
													"var Ajv  = require('ajv'),",
													"    ajv = new Ajv(),",
													"    schema = creationSchema;",
													"(pm.response.code===201 ? pm.test : pm.test.skip)('Reply Schema is valid', function () {",
													"    pm.expect(ajv.validate(schema, pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;",
													"});"
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "List Zones",
									"item": [
										{
											"name": "List all Zones",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9246cb17-134c-4c49-a21b-c490440780a8",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-get-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base-url}}/zones",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"zones"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "11039f52-d281-4998-8357-69db60895b1b",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6f0445d8-4f3f-49ba-8fd2-811488238006",
												"type": "text/javascript",
												"exec": [
													"var getAllSchema = pm.environment.get(\"getAllSchema\");",
													"var Ajv  = require('ajv'),",
													"    ajv = new Ajv(),",
													"    schema = getAllSchema;",
													"(pm.response.code===200 ? pm.test : pm.test.skip)('Reply Schema is valid', function () {",
													"    pm.expect(ajv.validate(schema, pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;",
													"});"
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Get Specific Zone Info",
									"item": [
										{
											"name": "List Specific Zone",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "fd51d80d-bfc3-403a-b505-4c0399f93bfe",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "7a8b4477-7803-42ec-9239-22e3f6e43034",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-get-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base-url}}/zone/{{zoneId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"zone",
														"{{zoneId}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "29fc5cce-5068-4cfc-9219-2293024e9628",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2c883cbb-2ca7-4628-903d-bb1ada85b85f",
												"type": "text/javascript",
												"exec": [
													"var getOneSchema = pm.environment.get(\"getOneSchema\");",
													"var Ajv  = require('ajv'),",
													"    ajv = new Ajv(),",
													"    schema = getOneSchema;",
													"(pm.response.code===200 ? pm.test : pm.test.skip)('Reply Schema is valid', function () {",
													"    pm.expect(ajv.validate(schema, pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;",
													"});"
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Modify a Zone",
									"item": [
										{
											"name": "Modify a Zone",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "1087e727-1b2c-46fd-a57c-34a4675c998a",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "ebaa8a84-301c-4579-b34b-64474e630996",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-oper-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"Speakers - Living Room Mod\",\n  \"comment\": \"All Speakers grouped in the Living Room Mod\",\n  \"deviceIds\": [\n    \"{{deviceId}}\"\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/zone/{{zoneId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"zone",
														"{{zoneId}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "1c5c8b6b-85fb-446d-aae4-2ca64ca11fda",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "aebe79a0-17ba-4a57-b9e4-7d91f159c8f9",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Register Devices to Zone",
									"item": [
										{
											"name": "Register Devices to Zone",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "53a5c04b-0e33-4816-8d93-f30616253bd5",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "96320bbc-43f5-4593-bf2e-856625316475",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-oper-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"deviceIds\": [\n    \"{{deviceId}}\"\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/zone/{{zoneId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"zone",
														"{{zoneId}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4923c6c5-2715-4776-a792-f46b3f05a8f3",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "9f98c629-0fda-43cf-9c65-1ecd487342fc",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Delete a Zone",
									"item": [
										{
											"name": "Delete a Zone",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "7b5f2e8a-a5c0-4777-9aeb-7dfc43302e4f",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "721f2b21-2d4a-40c5-a186-dfd0d4344758",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-oper-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{base-url}}/zone/{{zoneId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"zone",
														"{{zoneId}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "08ee6fda-ecfe-4b34-8d85-c12f82cac280",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "7196adb1-e2b3-4c51-b210-0624ff07bd31",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Usupported Operations",
									"item": [
										{
											"name": "(unsupported) GET on /zone",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "05f32e0a-1b5e-4f94-bd89-9482347adb78",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-noconflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base-url}}/zone",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"zone"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) POST on /zone/*",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "86294311-a978-4356-b00a-d9e890625f81",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-conflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"test\" : \"value\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/zone/{{zoneId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"zone",
														"{{zoneId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) PUT on /zone",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9f359fa8-ceaa-4a63-97c4-5452fc41c4b3",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-noconflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"test\" : \"value\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/zone",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"zone"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) PUT on /zones",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "93eca3f2-6a77-4062-9cbc-10732340815b",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-conflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"test\" : \"value\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/zones",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"zones"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) PATCH on /zone",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3a6a9574-498b-4b04-9bc8-009cdba4b997",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-noconflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"test\" : \"value\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/zone",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"zone"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) PATCH on /zones",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "643af000-b58c-4f28-abca-c3153fb64389",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-conflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"test\" : \"value\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/zones",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"zones"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) DELETE on /zone",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "378ce350-41a2-4c52-af0a-937140a0e5d5",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-noconflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{base-url}}/zone",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"zone"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) DELETE on /zones",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "bd627bc4-48ee-477b-91c3-13cc7b25c66f",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-conflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{base-url}}/zones",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"zones"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "e372c9e7-122f-4664-92c8-9b67d395d6b8",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "06d0a155-964e-489d-bbdb-120de0759c3f",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "713e8493-fcfd-4503-9089-4ac32cad8d0d",
										"type": "text/javascript",
										"exec": [
											"var getZonesSchema = {",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema\",",
											"  \"$id\": \"http://example.com/example.json\",",
											"  \"type\": \"array\",",
											"  \"title\": \"Zone Info\",",
											"  \"description\": \"Zone Information\",",
											"  \"default\": [],",
											"  \"items\": {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"      \"zoneId\": {",
											"        \"type\": \"string\",",
											"        \"format\": \"uuid\"",
											"      },",
											"      \"name\": {",
											"        \"type\": \"string\",",
											"        \"minLength\": 2,",
											"        \"maxLength\": 128",
											"      },",
											"      \"comment\": {",
											"        \"type\": \"string\",",
											"        \"minLength\": 8,",
											"        \"maxLength\": 1024",
											"      },",
											"      \"deviceIds\": {",
											"        \"type\": \"array\",",
											"        \"default\": [],",
											"        \"items\": {",
											"          \"type\": \"string\",",
											"          \"format\": \"uuid\"",
											"        }",
											"      }",
											"    },",
											"    \"required\": [",
											"      \"zoneId\",",
											"      \"name\",",
											"      \"comment\",",
											"      \"deviceIds\"",
											"    ]",
											"  },",
											"  \"uniqueItems\": true",
											"};",
											"",
											"var getZoneSchema = {",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema\",",
											"  \"$id\": \"http://example.com/example.json\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"zoneId\": {",
											"      \"type\": \"string\",",
											"      \"format\": \"uuid\"",
											"    },",
											"    \"name\": {",
											"      \"type\": \"string\",",
											"      \"minLength\": 2,",
											"      \"maxLength\": 128",
											"    },",
											"    \"comment\": {",
											"      \"type\": \"string\",",
											"      \"minLength\": 8,",
											"      \"maxLength\": 1024",
											"    },",
											"    \"deviceIds\": {",
											"      \"type\": \"array\",",
											"      \"default\": [],",
											"      \"items\": {",
											"        \"type\": \"string\",",
											"        \"format\": \"uuid\"",
											"      }",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"zoneId\",",
											"    \"name\",",
											"    \"comment\",",
											"    \"deviceIds\"",
											"  ]",
											"};",
											"",
											"var createZoneSchema = {",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema\",",
											"  \"$id\": \"http://example.com/example.json\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"zoneId\": {",
											"      \"type\": \"string\",",
											"      \"format\": \"uuid\"",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"zoneId\"",
											"  ]",
											"};",
											"",
											"pm.environment.set(\"getOneSchema\", getZoneSchema);",
											"pm.environment.set(\"getAllSchema\", getZonesSchema);",
											"pm.environment.set(\"creationSchema\", createZoneSchema);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "989116bb-4636-46c2-91e7-3bdbca6e0b14",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"auth": {
						"type": "oauth2",
						"oauth2": [
							{
								"key": "accessToken",
								"value": "{{access-token}}",
								"type": "string"
							},
							{
								"key": "addTokenTo",
								"value": "header",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ed330244-7e1e-4e06-a789-ace8e99a7411",
								"type": "text/javascript",
								"exec": [
									"pm.environment.set(\"expected-get-result\", 200);",
									"pm.environment.set(\"expected-oper-result\", 200);",
									"pm.environment.set(\"expected-create-result\", 201);",
									"pm.environment.set(\"expected-oper-admin-result\", 403);",
									"pm.environment.set(\"expected-create-admin-result\", 403);",
									"pm.environment.set(\"expected-unsup-oper-noconflict-result\", 404);",
									"pm.environment.set(\"expected-unsup-oper-conflict-result\", 500);",
									"",
									"var accessToken = pm.collectionVariables.get(\"access-token-standard\");",
									"pm.environment.set(\"access-token\", accessToken);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c2140013-5710-4c50-ba9d-48ea6843101c",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Secured - Admin User",
					"item": [
						{
							"name": "PREP",
							"item": [
								{
									"name": "Clean Redis",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{sim-url}}/{{sim-clean-db}}",
											"host": [
												"{{sim-url}}"
											],
											"path": [
												"{{sim-clean-db}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Prepare Discovered Devices",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{sim-url}}/{{sim-register-devices}}",
											"host": [
												"{{sim-url}}"
											],
											"path": [
												"{{sim-register-devices}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Devices",
							"item": [
								{
									"name": "List Devices",
									"item": [
										{
											"name": "List all Devices",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ab465591-a6e7-459b-af8f-81d37fb719a4",
														"exec": [
															"var deviceAddress = null;",
															"if (pm.response.code === 200) {",
															"  var address = pm.response.json()[0].address;",
															"  if (address != null) {",
															"    pm.collectionVariables.set(\"deviceAddress\", address);",
															"    deviceAddress = address;",
															"  }",
															"}",
															"if (deviceAddress === null) {",
															"    var tempAddress = pm.collectionVariables.get(\"temp-address\");",
															"  pm.collectionVariables.set(\"deviceAddress\", tempAddress);",
															"}",
															"",
															"var expectedResult = pm.environment.get(\"expected-get-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "405b81f0-4d27-414b-8fef-e200e3eb93a6",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base-url}}/devices",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"devices"
													],
													"query": [
														{
															"key": "includeRegistered",
															"value": "true",
															"disabled": true
														},
														{
															"key": "includeUnregistered",
															"value": "true",
															"disabled": true
														}
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6895ca41-d6fc-49ca-a4be-c42e4e2d6925",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f38136b7-b54d-4f77-90fb-051949df4e77",
												"type": "text/javascript",
												"exec": [
													"var getAllSchema = pm.environment.get(\"getAllSchema\");",
													"var Ajv  = require('ajv'),",
													"    ajv = new Ajv(),",
													"    schema = getAllSchema;",
													"(pm.response.code===200 ? pm.test : pm.test.skip)('Reply Schema is valid', function () {",
													"    pm.expect(ajv.validate(schema, pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;",
													"});"
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Register a Device",
									"item": [
										{
											"name": "Register a Device",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6379483e-5948-4383-a772-17549d9dcbc5",
														"exec": [
															"var uuId = null;",
															"if (pm.response.code === 201) {",
															"  var deviceId = pm.response.json().deviceId;",
															"  if (deviceId != null) {",
															"    pm.collectionVariables.set(\"deviceId\", deviceId);",
															"    uuId = deviceId;",
															"  }",
															"}",
															"if (uuId === null) {",
															"  var tempId = pm.collectionVariables.get(\"temp-id\");",
															"  pm.collectionVariables.set(\"deviceId\", tempId);",
															"}",
															"",
															"var expectedResult = pm.environment.get(\"expected-create-admin-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "82c6d522-c558-4c1c-bb75-59be6f1fdbe1",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"B UHTV\",\n    \"manufacturer\": \"Semsang Shark Etc.\",\n    \"comment\": \"Comment 2 existing\",\n    \"address\": \"{{deviceAddress}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/devices",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"devices"
													]
												}
											},
											"response": []
										},
										{
											"name": "Register a Device (Duplicate)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "dc4d0585-feb2-42ba-99d2-ffe7a3e8a213",
														"exec": [
															"pm.test(\"Status code is 409\", function () {",
															"    pm.response.to.have.status(409);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "80f2ea1a-d1cf-440b-9cf5-753779f72007",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"B UHTV\",\n    \"manufacturer\": \"Semsang Shark Etc.\",\n    \"comment\": \"Comment 2 existing\",\n    \"address\": \"{{deviceAddress}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/devices",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"devices"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5382d5a1-baf5-4a8e-b715-90ac10e967e7",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "4328b37f-356f-446a-88d4-df6a2f0c56ce",
												"type": "text/javascript",
												"exec": [
													"var creationSchema = pm.environment.get(\"creationSchema\");",
													"var Ajv  = require('ajv'),",
													"    ajv = new Ajv(),",
													"    schema = creationSchema;",
													"(pm.response.code===201 ? pm.test : pm.test.skip)('Reply Schema is valid', function () {",
													"    pm.expect(ajv.validate(schema, pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;",
													"});"
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Get Specific Device Info",
									"item": [
										{
											"name": "Get Specific Device Info",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "fde74cc5-a1ea-4f71-9cfa-035238d14989",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "5e78b97f-4dc3-47af-987e-de5997cda75c",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-get-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base-url}}/device/{{deviceId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"device",
														"{{deviceId}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4ba40b3f-5554-44be-9be5-162e0cb2b6b5",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6f47b0aa-907e-4d36-b155-db6f7bdbc133",
												"type": "text/javascript",
												"exec": [
													"var getOneSchema = pm.environment.get(\"getOneSchema\");",
													"var Ajv  = require('ajv'),",
													"    ajv = new Ajv(),",
													"    schema = getOneSchema;",
													"(pm.response.code===200 ? pm.test : pm.test.skip)('Reply Schema is valid', function () {",
													"    pm.expect(ajv.validate(schema, pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;",
													"});"
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Modify a Device",
									"item": [
										{
											"name": "Modify a Device",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "69bac57a-6ac0-4539-8430-3bb9db00e77b",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "c5d1bb04-00a6-4f2b-a887-5cde614a9b65",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-oper-admin-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"B UHTV\",\n  \"manufacturer\": \"SakSong etc\",\n  \"comment\": \"TV - mod\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/device/{{deviceId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"device",
														"{{deviceId}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4535e086-b5b7-4fe7-95cb-6bccd02f28f7",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6bea6115-69c2-4030-88c3-aed34bb4bfb0",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Switch a Device On/Off",
									"item": [
										{
											"name": "Switch a Device On",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "bb023676-12bc-49db-9c3e-d68ca17769fa",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-oper-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "99267a72-8beb-4623-9b38-be0a47be2999",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"state\": \"on\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/device/{{deviceId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"device",
														"{{deviceId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Switch a Device Off",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "98945a75-4f25-4956-a969-1b89adac040d",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-oper-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "2f5f571f-746a-422a-a4e8-c828fb3303d7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"state\": \"off\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/device/{{deviceId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"device",
														"{{deviceId}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b8d61594-feb1-4106-ba74-519d2e2f3cef",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "dfe2c427-e357-4555-9000-d07f8b641657",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Delete a Device",
									"item": [
										{
											"name": "Delete a Device",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "715b30df-f057-40ab-8eb7-3aea7d7681fa",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "d35ccdfd-e5b0-4c87-96f6-89e6dd7c9bf8",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-oper-admin-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{base-url}}/device/{{deviceId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"device",
														"{{deviceId}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "65f3238a-e305-48e5-9c8e-55855fa42958",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "674ea86e-731d-4d37-9dd0-ed3180ad12e2",
												"type": "text/javascript",
												"exec": [
													"var expectedResult = pm.environment.get(\"expected-oper-admin-result\");",
													"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
													"    pm.response.to.have.status(expectedResult);",
													"});"
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Usupported Operations",
									"item": [
										{
											"name": "(unsupported) GET on /device",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f0689368-53e6-4536-8140-30f0195f5c83",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-noconflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base-url}}/device",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"device"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) POST on /device/*",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "af756aa4-934a-4f7c-8e82-65d20e9a831a",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-conflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"test\" : \"value\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/device/{{deviceId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"device",
														"{{deviceId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) PUT on /device",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b539e3af-6d50-4f27-a27d-be45caf2517a",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-noconflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"test\" : \"value\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/device",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"device"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) PUT on /devices",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "209a250d-1abd-4635-bcff-07f1b9d55365",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-conflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"test\" : \"value\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/devices",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"devices"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) PATCH on /device",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "05318e51-9bf5-46c2-8595-f7909613c946",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-noconflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"test\" : \"value\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/device",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"device"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) PATCH on /devices",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "cc529312-8471-40a1-b04a-83e3ba4d0263",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-conflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"test\" : \"value\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/devices",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"devices"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) DELETE on /device",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e705764a-bb28-4ec0-8ca8-e79c499328d2",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-noconflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{base-url}}/device",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"device"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) DELETE on /devices",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f6080ae1-9062-4d33-a752-303a9375ea3c",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-conflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{base-url}}/devices",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"devices"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "588b9385-d96b-4120-9803-08acca0bb30d",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "54c23814-6964-4aaf-b9ac-ca9b6b6e5626",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3baa11bc-8473-420e-92a5-06a5a6054363",
										"type": "text/javascript",
										"exec": [
											"var getDeviceSchema = {",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema\",",
											"  \"$id\": \"http://example.com/example.json\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"deviceId\": {",
											"      \"type\": \"string\",",
											"      \"format\": \"uuid\"",
											"    },",
											"    \"name\": {",
											"      \"type\": \"string\",",
											"      \"minLength\": 2,",
											"      \"maxLength\": 128",
											"    },",
											"    \"manufacturer\": {",
											"      \"type\": \"string\",",
											"      \"minLength\": 2,",
											"      \"maxLength\": 256",
											"    },",
											"    \"comment\": {",
											"      \"type\": \"string\",",
											"      \"minLength\": 2,",
											"      \"maxLength\": 1024",
											"    },",
											"    \"address\": {",
											"      \"type\": \"string\",",
											"      \"format\": \"ipv6\"",
											"    },",
											"    \"state\": {",
											"      \"type\": \"string\",",
											"      \"enum\": [\"on\", \"off\"]",
											"    },",
											"    \"availableControls\": {",
											"      \"type\": \"array\",",
											"      \"default\": [],",
											"      \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"          \"name\": {",
											"            \"type\": \"string\"",
											"          },",
											"          \"description\": {",
											"            \"type\": [\"string\", \"null\"]",
											"          },",
											"          \"controlType\": {",
											"            \"type\": \"string\",",
											"            \"enum\": [\"direct\", \"slider\", \"toggle\"]",
											"          },",
											"          \"value\": {",
											"            \"type\": [\"string\", \"null\"]",
											"          },",
											"          \"isManaged\": {",
											"            \"type\": \"boolean\"",
											"          }",
											"        },",
											"        \"required\": [",
											"          \"name\",",
											"          \"description\",",
											"          \"controlType\",",
											"          \"isManaged\"",
											"        ]",
											"      }",
											"    },",
											"    \"isRegistered\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"isGrouped\": {",
											"      \"type\": \"boolean\"",
											"    },",
											"    \"groupId\": {",
											"      \"type\": [\"string\", \"null\"],",
											"      \"format\": \"uuid\"",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"deviceId\",",
											"    \"name\",",
											"    \"manufacturer\",",
											"    \"comment\",",
											"    \"address\",",
											"    \"state\",",
											"    \"availableControls\",",
											"    \"isRegistered\",",
											"    \"isGrouped\"",
											"  ]",
											"};",
											"",
											"var getDevicesSchema = {",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema\",",
											"  \"$id\": \"http://example.com/example.json\",",
											"  \"type\": \"array\",",
											"  \"title\": \"Device Info\",",
											"  \"description\": \"Device Information\",",
											"  \"default\": [],",
											"  \"items\": {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"      \"deviceId\": {",
											"        \"type\": \"string\",",
											"        \"format\": \"uuid\"",
											"      },",
											"      \"name\": {",
											"        \"type\": \"string\",",
											"        \"minLength\": 2,",
											"        \"maxLength\": 128",
											"      },",
											"      \"manufacturer\": {",
											"        \"type\": \"string\",",
											"        \"minLength\": 2,",
											"        \"maxLength\": 256",
											"      },",
											"      \"comment\": {",
											"        \"type\": \"string\",",
											"        \"minLength\": 2,",
											"        \"maxLength\": 1024",
											"      },",
											"      \"address\": {",
											"        \"type\": \"string\",",
											"        \"format\": \"ipv6\"",
											"      },",
											"      \"state\": {",
											"        \"type\": \"string\",",
											"        \"enum\": [\"on\", \"off\"]",
											"      },",
											"      \"availableControls\": {",
											"        \"type\": \"array\",",
											"        \"default\": [],",
											"        \"items\": {",
											"          \"type\": \"object\",",
											"          \"properties\": {",
											"            \"name\": {",
											"              \"type\": \"string\"",
											"            },",
											"            \"description\": {",
											"              \"type\": [\"string\", \"null\"]",
											"            },",
											"            \"controlType\": {",
											"              \"type\": \"string\",",
											"              \"enum\": [\"direct\", \"slider\", \"toggle\"]",
											"            },",
											"            \"value\": {",
											"              \"type\": [\"string\", \"null\"]",
											"            },",
											"            \"isManaged\": {",
											"              \"type\": \"boolean\"",
											"            }",
											"          },",
											"          \"required\": [",
											"            \"name\",",
											"            \"description\",",
											"            \"controlType\",",
											"            \"isManaged\"",
											"          ]",
											"        }",
											"      },",
											"      \"isRegistered\": {",
											"        \"type\": \"boolean\"",
											"      },",
											"      \"isGrouped\": {",
											"        \"type\": \"boolean\"",
											"      },",
											"      \"groupId\": {",
											"        \"type\": [\"string\", \"null\"],",
											"        \"format\": \"uuid\"",
											"      }",
											"    },",
											"    \"required\": [",
											"      \"deviceId\",",
											"      \"name\",",
											"      \"manufacturer\",",
											"      \"comment\",",
											"      \"address\",",
											"      \"state\",",
											"      \"availableControls\",",
											"      \"isRegistered\",",
											"      \"isGrouped\"",
											"    ]",
											"  },",
											"  \"uniqueItems\": true",
											"};",
											"",
											"var createDeviceSchema = {",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema\",",
											"  \"$id\": \"http://example.com/example.json\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"deviceId\": {",
											"      \"type\": \"string\",",
											"      \"format\": \"uuid\"",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"deviceId\"",
											"  ]",
											"};",
											"",
											"pm.environment.set(\"getOneSchema\", getDeviceSchema);",
											"pm.environment.set(\"getAllSchema\", getDevicesSchema);",
											"pm.environment.set(\"creationSchema\", createDeviceSchema);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "fc3d2ed8-cb2e-45ea-a94c-2497d6a62cdb",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Groups",
							"item": [
								{
									"name": "PREP",
									"item": [
										{
											"name": "[PREP] Get valid deviceId",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5f6e2f5f-b366-4e89-a148-20855a5800a3",
														"exec": [
															"var uuId = null;",
															"if (pm.response.code === 201) {",
															"  var deviceId = pm.response.json().deviceId;",
															"  if (deviceId != null) {",
															"    pm.collectionVariables.set(\"deviceId\", deviceId);",
															"    uuId = deviceId;",
															"  }",
															"}",
															"if (uuId === null) {",
															"  var tempId = pm.collectionVariables.get(\"temp-id\");",
															"  pm.collectionVariables.set(\"deviceId\", tempId);",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "4c6f51d5-b977-44c8-8a43-b15eaa2d179c",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"B UHTV\",\n    \"manufacturer\": \"Semsang Shark Etc.\",\n    \"comment\": \"Comment 2 existing\",\n    \"address\": \"{{deviceAddress}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/devices",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"devices"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Register a Device Group",
									"item": [
										{
											"name": "Register a Group",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c0526b8f-9140-4fb8-8332-2fde7420e2b9",
														"exec": [
															"var uuId = null;",
															"if (pm.response.code === 201) {",
															"  var groupId = pm.response.json().groupId;",
															"  if (groupId != null) {",
															"    pm.collectionVariables.set(\"groupId\", groupId);",
															"    uuId = groupId;",
															"  }",
															"}",
															"if (uuId === null) {",
															"  var tempId = pm.collectionVariables.get(\"temp-id\");",
															"  pm.collectionVariables.set(\"groupId\", tempId);",
															"}",
															"",
															"var expectedResult = pm.environment.get(\"expected-create-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "85f8c75e-7ee4-4f8d-acbc-7b0715908b5c",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"Test Group\",\n  \"description\": \"Group Test Descr\",\n  \"comment\": \"Group Test Comment\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/groups",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"groups"
													]
												}
											},
											"response": []
										},
										{
											"name": "Register a Group (Duplicate)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "db50ba9c-1b93-4467-a042-9d1c6ca7a125",
														"exec": [
															"var expectedResult = 409;",
															"pm.test(\"Status code is \" + 409 + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "d2cca03a-701b-46b9-9340-e15e0117ec35",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"Test Group\",\n  \"description\": \"Group Test Descr\",\n  \"comment\": \"Group Test Comment\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/groups",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"groups"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6c1a2e88-f48e-4a2f-8fc2-852238b84a7a",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "887898f6-585f-419b-92e3-05919ae1221b",
												"type": "text/javascript",
												"exec": [
													"var creationSchema = pm.environment.get(\"creationSchema\");",
													"var Ajv  = require('ajv'),",
													"    ajv = new Ajv(),",
													"    schema = creationSchema;",
													"(pm.response.code===201 ? pm.test : pm.test.skip)('Reply Schema is valid', function () {",
													"    pm.expect(ajv.validate(schema, pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;",
													"});"
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "List Device Groups",
									"item": [
										{
											"name": "List all Groups",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "53e50402-7ad4-42b3-9587-71e80678985f",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-get-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base-url}}/groups",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"groups"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "79a8f794-d34d-4667-9687-26a43a493a10",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "57a5fc34-23da-4b70-b42e-cc6498fde949",
												"type": "text/javascript",
												"exec": [
													"var getAllSchema = pm.environment.get(\"getAllSchema\");",
													"var Ajv  = require('ajv'),",
													"    ajv = new Ajv(),",
													"    schema = getAllSchema;",
													"(pm.response.code===200 ? pm.test : pm.test.skip)('Reply Schema is valid', function () {",
													"    pm.expect(ajv.validate(schema, pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;",
													"});"
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Get Specific Device Group",
									"item": [
										{
											"name": "List Specific Group",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "86f9d555-a679-4f18-b2b6-56af58c632df",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "590fa90c-83dc-4c7f-8658-27ea8d4699d4",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-get-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base-url}}/group/{{groupId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"group",
														"{{groupId}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d879546b-2c77-41ba-837a-1227c74458ae",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "dcfeb05e-8eef-45d9-8b0b-b164f9e4986d",
												"type": "text/javascript",
												"exec": [
													"var getOneSchema = pm.environment.get(\"getOneSchema\");",
													"var Ajv  = require('ajv'),",
													"    ajv = new Ajv(),",
													"    schema = getOneSchema;",
													"(pm.response.code===200 ? pm.test : pm.test.skip)('Reply Schema is valid', function () {",
													"    pm.expect(ajv.validate(schema, pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;",
													"});"
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Modify a Device Group",
									"item": [
										{
											"name": "Modify a Group",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "5e64b7de-e1ae-44a3-9214-2224314b14e0",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "66fe8269-5e77-41c0-b8a4-f0def51d655b",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-oper-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"group 1 name mod\",\n  \"description\": \"group 1 desc mod\",\n  \"comment\": \"comment mod\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/group/{{groupId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"group",
														"{{groupId}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f48f69a8-69d9-47c7-90f3-91f32faa426c",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "9a09ee62-6949-43ed-8227-da6b3c3d4b06",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Enable/Disable a Device Group",
									"item": [
										{
											"name": "Enable a Group",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "6e26b856-f664-4c65-bd8d-f7d2c2d7f76c",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "8fadaded-c60a-40fb-9662-0d65f6b53133",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-oper-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"isEnabled\": true\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/group/{{groupId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"group",
														"{{groupId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "DIsable a Group",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "67dc3e9a-8724-41f7-a21f-33bfaa4a9867",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "2d8bcb33-e13d-49b5-b43f-48acaa26474e",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-oper-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"isEnabled\": false\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/group/{{groupId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"group",
														"{{groupId}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "26ec19df-801d-412f-81c8-734440090ad7",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "52e6c320-0e8d-4d09-bce0-19d7398b2bfe",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Register a Device to Group",
									"item": [
										{
											"name": "Add a Device to Group",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "0d0bf043-c2b5-4082-b184-a57e37502e17",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "149fb466-4018-41cc-b1ef-b025eecf522a",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-oper-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "{{base-url}}/group/{{groupId}}/device/{{deviceId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"group",
														"{{groupId}}",
														"device",
														"{{deviceId}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "aa0f9838-6353-4329-a443-71c7e33c7d4c",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "587b84cd-2d66-4665-b195-b93d33aec878",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Unregister a Device from Group",
									"item": [
										{
											"name": "Remove a Device from Group",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "e6ca17b2-2c05-4646-a1e6-85e1ec4353d4",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "3012d2db-7041-4d51-94be-f132443cbf9a",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-oper-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{base-url}}/group/{{groupId}}/device/{{deviceId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"group",
														"{{groupId}}",
														"device",
														"{{deviceId}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "62595427-2c7f-41e2-bc66-c59e2b9d42de",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "cafad1d9-beca-4b25-8a58-be7381a44d2d",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Delete a Device Group",
									"item": [
										{
											"name": "Delete a Group",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "56557bec-c6b1-4213-a140-bca6621b80c6",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "f46bbb52-9742-4102-a9ce-47c6a4fb1270",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-oper-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{base-url}}/group/{{groupId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"group",
														"{{groupId}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "51b0a2fb-0070-434f-848f-7c1977f150d9",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "1711b158-c695-485c-9c43-0b48affb35f4",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Usupported Operations",
									"item": [
										{
											"name": "(unsupported) GET on /group",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3f3ba220-3082-43f7-b51b-fd0bcab48143",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-noconflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base-url}}/group",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"group"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) POST on /group/*",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "da2dd72f-4f79-47ca-864a-e3b7ffcd0af5",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-conflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"test\" : \"value\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/group/{{groupId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"group",
														"{{groupId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) PUT on /group",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c497dd34-a6d0-4fad-9126-79e924878f6a",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-noconflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"test\" : \"value\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/group",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"group"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) PUT on /groups",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a84546c9-8c72-4a61-ab3e-d109911eb7ce",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-conflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"test\" : \"value\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/groups",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"groups"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) PATCH on /group",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "4ae75216-7341-4b9d-be35-673b8f9334bf",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-noconflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"test\" : \"value\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/group",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"group"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) PATCH on /groups",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a759477e-0318-474a-9159-0fb0d568eb69",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-conflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"test\" : \"value\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/groups",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"groups"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) DELETE on /group",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8d6ad236-83ef-4ff5-a367-0986251b5c29",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-noconflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{base-url}}/group",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"group"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) DELETE on /groups",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d7306a18-b227-4228-a615-b6d93ec399d3",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-conflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{base-url}}/groups",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"groups"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f9e972bd-b58b-4eda-adf1-00eed91a490e",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "45a3fa7d-df0f-4661-8f92-9731a0063669",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5be69b47-6159-4d40-b651-05b8703147fe",
										"type": "text/javascript",
										"exec": [
											"var getGroupsSchema = {",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema\",",
											"  \"$id\": \"http://example.com/example.json\",",
											"  \"type\": \"array\",",
											"  \"title\": \"Group Info\",",
											"  \"description\": \"Group Information\",",
											"  \"default\": [],",
											"  \"items\": {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"      \"groupId\": {",
											"        \"type\": \"string\",",
											"        \"format\": \"uuid\"",
											"      },",
											"      \"name\": {",
											"        \"type\": \"string\",",
											"        \"minLength\": 3,",
											"        \"maxLength\": 64",
											"      },",
											"      \"description\": {",
											"        \"type\": [\"string\", \"null\"],",
											"        \"minLength\": 0,",
											"        \"maxLength\": 128",
											"      },",
											"      \"comment\": {",
											"        \"type\": [\"string\", \"null\"],",
											"        \"minLength\": 0,",
											"        \"maxLength\": 128",
											"      },",
											"      \"isEnabled\": {",
											"        \"type\": \"boolean\",",
											"      },",
											"      \"devices\": {",
											"        \"type\": \"array\",",
											"        \"default\": [],",
											"        \"items\": {",
											"          \"type\": \"string\",",
											"          \"format\": \"uuid\"",
											"        }",
											"      }",
											"    },",
											"    \"required\": [",
											"      \"groupId\",",
											"      \"name\",",
											"      \"description\",",
											"      \"comment\",",
											"      \"isEnabled\",",
											"      \"devices\"",
											"    ]",
											"  },",
											"  \"uniqueItems\": true",
											"};",
											"",
											"var getGroupSchema = {",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema\",",
											"  \"$id\": \"http://example.com/example.json\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"groupId\": {",
											"      \"type\": \"string\",",
											"      \"format\": \"uuid\"",
											"    },",
											"    \"name\": {",
											"      \"type\": \"string\",",
											"      \"minLength\": 3,",
											"      \"maxLength\": 64",
											"    },",
											"    \"description\": {",
											"      \"type\": [\"string\", \"null\"],",
											"      \"minLength\": 0,",
											"      \"maxLength\": 128",
											"    },",
											"    \"comment\": {",
											"      \"type\": [\"string\", \"null\"],",
											"      \"minLength\": 0,",
											"      \"maxLength\": 128",
											"    },",
											"    \"isEnabled\": {",
											"      \"type\": \"boolean\",",
											"    },",
											"    \"devices\": {",
											"      \"type\": \"array\",",
											"      \"default\": [],",
											"      \"items\": {",
											"        \"type\": \"string\",",
											"        \"format\": \"uuid\"",
											"      }",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"groupId\",",
											"    \"name\",",
											"    \"description\",",
											"    \"comment\",",
											"    \"isEnabled\",",
											"    \"devices\"",
											"  ]",
											"};",
											"",
											"var createGroupSchema = {",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema\",",
											"  \"$id\": \"http://example.com/example.json\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"groupId\": {",
											"      \"type\": \"string\",",
											"      \"format\": \"uuid\"",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"groupId\"",
											"  ]",
											"};",
											"",
											"pm.environment.set(\"getOneSchema\", getGroupSchema);",
											"pm.environment.set(\"getAllSchema\", getGroupsSchema);",
											"pm.environment.set(\"creationSchema\", createGroupSchema);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7587bb62-7b56-4932-bf67-6a06696f8bd3",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Controls",
							"item": [
								{
									"name": "Register a Control",
									"item": [
										{
											"name": "Register a Control (Direct)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "b24a779c-e2d2-4a71-9f7c-ce575106950e",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "1a287afe-4d42-4b49-bd37-f1597793a13b",
														"exec": [
															"var uuId = null;",
															"if (pm.response.code === 201) {",
															"  var controlId = pm.response.json().controlId;",
															"  if (controlId != null) {",
															"    pm.collectionVariables.set(\"controlId-direct\", controlId);",
															"    uuId = controlId;",
															"  }",
															"}",
															"if (uuId === null) {",
															"  var tempId = pm.collectionVariables.get(\"temp-id\");",
															"  pm.collectionVariables.set(\"controlId-direct\", tempId);",
															"}",
															"",
															"var expectedResult = pm.environment.get(\"expected-create-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"Channel\",\n  \"description\": \"Channel Control desc\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/controls/device/{{deviceId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"controls",
														"device",
														"{{deviceId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Register a Control (Slider)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "88928408-c264-4634-9427-341582b38bdf",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "746e2e59-c4df-4d53-b6e7-20ef1458a8be",
														"exec": [
															"var uuId = null;",
															"if (pm.response.code === 201) {",
															"  var controlId = pm.response.json().controlId;",
															"  if (controlId != null) {",
															"    pm.collectionVariables.set(\"controlId-slider\", controlId);",
															"    uuId = controlId;",
															"  }",
															"}",
															"if (uuId === null) {",
															"  var tempId = pm.collectionVariables.get(\"temp-id\");",
															"  pm.collectionVariables.set(\"controlId-slider\", tempId);",
															"}",
															"",
															"var expectedResult = pm.environment.get(\"expected-create-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"Volume\",\n  \"description\": \"Volume Control desc\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/controls/device/{{deviceId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"controls",
														"device",
														"{{deviceId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Register a Control (Toggle)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "f76f2280-4df5-4b6e-be68-9aa2ceea2bb6",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "73e0caa1-ae82-4f36-bd99-647ed2ce601b",
														"exec": [
															"var uuId = null;",
															"if (pm.response.code === 201) {",
															"  var controlId = pm.response.json().controlId;",
															"  if (controlId != null) {",
															"    pm.collectionVariables.set(\"controlId-toggle\", controlId);",
															"    uuId = controlId;",
															"  }",
															"}",
															"if (uuId === null) {",
															"  var tempId = pm.collectionVariables.get(\"temp-id\");",
															"  pm.collectionVariables.set(\"controlId-toggle\", tempId);",
															"}",
															"",
															"var expectedResult = pm.environment.get(\"expected-create-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"Mute\",\n  \"description\": \"Mute Control desc\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/controls/device/{{deviceId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"controls",
														"device",
														"{{deviceId}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "7e91176e-a23c-4079-8544-ebbc550bda00",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "fcded6e4-8b5d-40ba-8e28-5067ec6a4afa",
												"type": "text/javascript",
												"exec": [
													"var creationSchema = pm.environment.get(\"creationSchema\");",
													"var Ajv  = require('ajv'),",
													"    ajv = new Ajv(),",
													"    schema = creationSchema;",
													"(pm.response.code===201 ? pm.test : pm.test.skip)('Reply Schema is valid', function () {",
													"    pm.expect(ajv.validate(schema, pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;",
													"});"
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "List all Controls",
									"item": [
										{
											"name": "List all Controls",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1bd2f3e6-8265-46b9-98ec-e0d12e05eaef",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base-url}}/controls/devices",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"controls",
														"devices"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "24ad1bca-54e3-4e97-b7a2-27bd6f529174",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "1ccb2273-2d80-4ab8-84d7-9173ff37eb55",
												"type": "text/javascript",
												"exec": [
													"var expectedResult = pm.environment.get(\"expected-get-result\");",
													"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
													"    pm.response.to.have.status(expectedResult);",
													"});",
													"",
													"var getAllSchema = pm.environment.get(\"getAllSchema\");",
													"var Ajv  = require('ajv'),",
													"    ajv = new Ajv(),",
													"    schema = getAllSchema;",
													"(pm.response.code===200 ? pm.test : pm.test.skip)('Reply Schema is valid', function () {",
													"    pm.expect(ajv.validate(schema, pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;",
													"});"
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "List all Controls for Specified Device",
									"item": [
										{
											"name": "List all Controls for Specific Device",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "b78df9cf-76bc-4145-9e5a-0c02b62d8616",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "829c91bd-c799-4818-b84f-7f1aab930fa4",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base-url}}/controls/device/{{deviceId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"controls",
														"device",
														"{{deviceId}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4f63b744-1c58-4ceb-a9e0-dd74db6eaf71",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3ae277e3-0f48-4f92-94a2-b0f39412e4de",
												"type": "text/javascript",
												"exec": [
													"var expectedResult = pm.environment.get(\"expected-get-result\");",
													"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
													"    pm.response.to.have.status(expectedResult);",
													"});",
													"",
													"var getAllSchema = pm.environment.get(\"getAllSchema\");",
													"var Ajv  = require('ajv'),",
													"    ajv = new Ajv(),",
													"    schema = getAllSchema;",
													"(pm.response.code===200 ? pm.test : pm.test.skip)('Reply Schema is valid', function () {",
													"    pm.expect(ajv.validate(schema, pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;",
													"});"
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Set Controls",
									"item": [
										{
											"name": "Set Control - Direct",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "092fcb11-8557-4de7-98b3-03ef91f2a6b7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "c5bbb05c-7703-4738-bffb-0371cb203682",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-oper-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"newValue\": \"15\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/controls/device/direct/{{controlId-direct}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"controls",
														"device",
														"direct",
														"{{controlId-direct}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Set Control - Slider",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "3783df3f-9c1b-4e4c-b46c-0d9d75cb9d55",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "59879ed6-5a84-4e90-9b1a-63298f670ba6",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-oper-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"direction\": \"up\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/controls/device/slider/{{controlId-slider}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"controls",
														"device",
														"slider",
														"{{controlId-slider}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Set Control - Toggle",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "a844b0e9-d21d-44fe-af86-0583a7d864bd",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "47163dce-007a-4d49-88e4-6963dad8167d",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-oper-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "{{base-url}}/controls/device/toggle/{{controlId-toggle}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"controls",
														"device",
														"toggle",
														"{{controlId-toggle}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4e211800-a107-4ebd-a3f3-9d4b6d31cb79",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "579b9c61-67f9-4920-b5db-ea92e522a6ce",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Modify a Control",
									"item": [
										{
											"name": "Modify a Control (Direct)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "9431699b-716c-4e3a-8b7e-a2d98f2399f4",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "f17d363f-ece4-4020-8090-7a06383bd2fa",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-oper-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"description\": \"new-description X\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/control/{{controlId-direct}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"control",
														"{{controlId-direct}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Modify a Control (Slider)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "040a5067-e6fe-4504-862d-1c4d2cbc97a6",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "429af637-4396-4c10-8a8b-46db462cf055",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-oper-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"description\": \"new-description Y\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/control/{{controlId-slider}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"control",
														"{{controlId-slider}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Modify a Control (Toggle)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "bd5ba6f4-ae14-4b68-8dcd-0cb6705fc1e9",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "5a5640b2-0508-496b-b492-53eecbe7efcc",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-oper-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"description\": \"new-description Z\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/control/{{controlId-toggle}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"control",
														"{{controlId-toggle}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "38109581-5fa6-43a6-9497-50a6879b73a3",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "529ef6ae-a1f7-4475-9202-eaaadc69bc45",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Delete a Control",
									"item": [
										{
											"name": "Delete a Control (Direct)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "f5dc1fbc-6834-4ff9-bb80-90adba3f09f8",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "1afcc35b-1f4d-488c-8232-3ba93edf2322",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-oper-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{base-url}}/control/{{controlId-direct}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"control",
														"{{controlId-direct}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete a Control (Slider)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "2ee96be1-4e24-4bf3-9487-f97999b9f6d7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "907b5818-22f2-4192-8931-8fd7551b1df3",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-oper-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{base-url}}/control/{{controlId-slider}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"control",
														"{{controlId-slider}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete a Control (Toggle)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "c48d9cf0-472c-4402-9cc6-e9555b695b80",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "5456a250-6810-4874-9a27-2cb8864dd657",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-oper-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{base-url}}/control/{{controlId-toggle}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"control",
														"{{controlId-toggle}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2d49ccb0-7274-4d88-882a-fa749068abd2",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ce35038e-3b1d-437d-9e32-6fc57b66b903",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Usupported Operations",
									"item": [
										{
											"name": "(unsupported) GET on /control",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "75674b1a-9e57-4531-ab81-60e429de91f7",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-noconflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base-url}}/control",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"control"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) POST on /control/*",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b095131a-d4fc-47a8-b5e3-a95e44146a38",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-conflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"test\" : \"value\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/control/{{controlId-direct}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"control",
														"{{controlId-direct}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) PUT on /control",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "10fcbed9-f588-48c8-9596-01006ed5b94c",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-noconflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"test\" : \"value\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/control",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"control"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) PUT on /controls",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ca237dae-876d-4989-ba42-6ff751aa2892",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-noconflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"test\" : \"value\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/controls",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"controls"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) PATCH on /control",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9df5732a-d628-4211-b3a6-09d4a04b070b",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-noconflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"test\" : \"value\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/control",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"control"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) PATCH on /controls",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9903bb62-8552-4802-ad5f-190040d24f0e",
														"exec": [
															"var expectedResult = 401;",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"test\" : \"value\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/controls",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"controls"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) DELETE on /control",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3da99d61-6612-424f-a582-b57e08a477c4",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-noconflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{base-url}}/control",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"control"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) DELETE on /controls",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1e56cf4b-9b92-45cc-8125-ab1be49a6297",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-noconflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{base-url}}/controls",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"controls"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "77b8e923-165b-42ec-9610-b5d1386fdf28",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "28e8d57d-9f3b-4de8-a6dd-cf946257ffb8",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f0fbc73a-6b6c-46de-a6c1-6fcf2b254063",
										"type": "text/javascript",
										"exec": [
											"var getControlsSchema = {",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema\",",
											"  \"$id\": \"http://example.com/example.json\",",
											"  \"type\": \"array\",",
											"  \"title\": \"Control Info\",",
											"  \"description\": \"Control Information\",",
											"  \"default\": [],",
											"  \"items\": {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"      \"deviceId\": {",
											"        \"type\": \"string\",",
											"        \"format\": \"uuid\"",
											"      },",
											"      \"controlId\": {",
											"        \"type\": \"string\",",
											"        \"format\": \"uuid\"",
											"      },",
											"      \"name\": {",
											"        \"type\": \"string\",",
											"        \"minLength\": 2,",
											"        \"maxLength\": 128",
											"      },",
											"      \"description\": {",
											"        \"type\": [\"string\", \"null\"],",
											"        \"minLength\": 2,",
											"        \"maxLength\": 1024",
											"      },",
											"      \"currentValue\": {",
											"        \"type\": [\"string\", \"null\"],",
											"        \"minLength\": 1,",
											"        \"maxLength\": 128",
											"      }",
											"    },",
											"    \"required\": [",
											"      \"deviceId\",",
											"      \"controlId\",",
											"      \"name\",",
											"      \"description\"",
											"    ]",
											"  },",
											"  \"uniqueItems\": true",
											"};",
											"",
											"var getControlSchema = {",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema\",",
											"  \"$id\": \"http://example.com/example.json\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"deviceId\": {",
											"      \"type\": \"string\",",
											"      \"format\": \"uuid\"",
											"    },",
											"    \"controlId\": {",
											"      \"type\": \"string\",",
											"      \"format\": \"uuid\"",
											"    },",
											"    \"name\": {",
											"      \"type\": \"string\",",
											"      \"minLength\": 2,",
											"      \"maxLength\": 128",
											"    },",
											"    \"description\": {",
											"      \"type\": [\"string\", \"null\"],",
											"      \"minLength\": 0,",
											"      \"maxLength\": 128",
											"    },",
											"    \"currentValue\": {",
											"      \"type\": [\"string\", \"null\"],",
											"      \"minLength\": 1,",
											"      \"maxLength\": 128",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"deviceId\",",
											"    \"controlId\",",
											"    \"name\",",
											"    \"description\"",
											"  ]",
											"};",
											"",
											"var createControlSchema = {",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema\",",
											"  \"$id\": \"http://example.com/example.json\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"controlId\": {",
											"      \"type\": \"string\",",
											"      \"format\": \"uuid\"",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"controlId\"",
											"  ]",
											"};",
											"",
											"pm.environment.set(\"getOneSchema\", getControlSchema);",
											"pm.environment.set(\"getAllSchema\", getControlsSchema);",
											"pm.environment.set(\"creationSchema\", createControlSchema);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "733c9dc0-3bc7-4fc1-ac9c-dcecf2e9da0f",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Logs",
							"item": [
								{
									"name": "List all Controller Logs",
									"item": [
										{
											"name": "List all Controller Logs",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "748231b6-4970-40e8-8d5d-03d8e5824ef1",
														"exec": [
															"var simBaseUrl = pm.collectionVariables.get(\"sim-url\");",
															"",
															"//Simulator - Create a List of 2 Controller Logs",
															"var simAction = pm.collectionVariables.get(\"sim-register-control-logs\");",
															"var options = {",
															"  'method': 'POST',",
															"  'url': simBaseUrl + \"/\" + simAction,",
															"  'header': {",
															"    'Content-Type': 'application/json',",
															"    'Accept': 'application/json'",
															"  }",
															"};",
															"pm.sendRequest(options, function (err, response) {",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "9c3cdbaf-0c37-4612-a3a9-3366d44fcc8f",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-get-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base-url}}/logs/controller",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"logs",
														"controller"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "9bc743ad-4775-4836-80f8-699f7e765be5",
												"type": "text/javascript",
												"exec": [
													"var getLogsSchema = {",
													"  \"$schema\": \"http://json-schema.org/draft-07/schema\",",
													"  \"$id\": \"http://example.com/example.json\",",
													"  \"type\": \"array\",",
													"  \"title\": \"Controller Log Info\",",
													"  \"description\": \"Controller Log Information\",",
													"  \"default\": [],",
													"  \"items\": {",
													"    \"type\": \"object\",",
													"    \"properties\": {",
													"      \"timestamp\": {",
													"        \"type\": \"string\",",
													"        \"format\": \"date-time\"",
													"      },",
													"      \"level\": {",
													"        \"type\": \"string\",",
													"        \"enum\": [\"critical\", \"error\", \"warning\", \"info\", \"debug\", \"trace\" ]",
													"      },",
													"      \"title\": {",
													"        \"type\": \"string\",",
													"        \"minLength\": 4",
													"      },",
													"      \"message\": {",
													"        \"type\": \"string\",",
													"        \"minLength\": 8,",
													"      },",
													"      \"logId\": {",
													"        \"type\": \"string\",",
													"        \"format\": \"uuid\"",
													"      }",
													"    },",
													"    \"required\": [",
													"      \"timestamp\",",
													"      \"level\",",
													"      \"title\",",
													"      \"message\",",
													"      \"logId\"",
													"    ]",
													"  },",
													"  \"uniqueItems\": true",
													"};",
													"",
													"pm.environment.set(\"getAllSchema\", getLogsSchema);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "dfe1f8b5-83c7-459d-a40c-fa7a785fd91c",
												"type": "text/javascript",
												"exec": [
													"var getAllSchema = pm.environment.get(\"getAllSchema\");",
													"var Ajv  = require('ajv'),",
													"    ajv = new Ajv(),",
													"    schema = getAllSchema;",
													"(pm.response.code===200 ? pm.test : pm.test.skip)('Reply Schema is valid', function () {",
													"    pm.expect(ajv.validate(schema, pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;",
													"});"
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "List all Device Logs",
									"item": [
										{
											"name": "List all Device Logs",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0ac6bb0a-cd93-4dd4-8a61-de180ea1d12e",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-get-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "a2be81f3-044c-4bea-84be-9b8e7796a7f5",
														"exec": [
															"var simBaseUrl = pm.collectionVariables.get(\"sim-url\");",
															"",
															"//Simulator - Create a List of 2 Device Logs",
															"var simAction = pm.collectionVariables.get(\"sim-register-device-logs\");",
															"var devId = pm.collectionVariables.get(\"deviceId\");",
															"var options = {",
															"  'method': 'POST',",
															"  'url': simBaseUrl + \"/\" + simAction + \"/\" + devId,",
															"  'header': {",
															"    'Content-Type': 'application/json',",
															"    'Accept': 'application/json'",
															"  }",
															"};",
															"pm.sendRequest(options, function (err, response) {",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base-url}}/logs/devices",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"logs",
														"devices"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "57b85744-9d6f-4e51-9e84-32819e214b9f",
												"type": "text/javascript",
												"exec": [
													"var getLogsSchema = {",
													"  \"$schema\": \"http://json-schema.org/draft-07/schema\",",
													"  \"$id\": \"http://example.com/example.json\",",
													"  \"type\": \"array\",",
													"  \"title\": \"Device Log Info\",",
													"  \"description\": \"Device Log Information\",",
													"  \"default\": [],",
													"  \"items\": {",
													"    \"type\": \"object\",",
													"    \"properties\": {",
													"      \"timestamp\": {",
													"        \"type\": \"string\",",
													"        \"format\": \"date-time\"",
													"      },",
													"      \"level\": {",
													"        \"type\": \"string\",",
													"        \"enum\": [\"critical\", \"error\", \"warning\", \"info\", \"debug\", \"trace\" ]",
													"      },",
													"      \"deviceId\": {",
													"        \"type\": \"string\",",
													"        \"format\": \"uuid\"",
													"      },",
													"      \"title\": {",
													"        \"type\": \"string\",",
													"        \"minLength\": 4",
													"      },",
													"      \"message\": {",
													"        \"type\": \"string\",",
													"        \"minLength\": 8,",
													"      },",
													"      \"logId\": {",
													"        \"type\": \"string\",",
													"        \"format\": \"uuid\"",
													"      }",
													"    },",
													"    \"required\": [",
													"      \"timestamp\",",
													"      \"level\",",
													"      \"title\",",
													"      \"message\",",
													"      \"logId\"",
													"    ]",
													"  },",
													"  \"uniqueItems\": true",
													"};",
													"",
													"pm.environment.set(\"getAllSchema\", getLogsSchema);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "be131112-6610-43e6-abf2-b2ee49a5f751",
												"type": "text/javascript",
												"exec": [
													"var getAllSchema = pm.environment.get(\"getAllSchema\");",
													"var Ajv  = require('ajv'),",
													"    ajv = new Ajv(),",
													"    schema = getAllSchema;",
													"(pm.response.code===200 ? pm.test : pm.test.skip)('Reply Schema is valid', function () {",
													"    pm.expect(ajv.validate(schema, pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;",
													"});"
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "List all Logs for Specific Device",
									"item": [
										{
											"name": "List all Logs for Specified Device",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "7713cad6-2708-4fdf-ac2e-aeda036066e2",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "816483e6-a851-4a0a-a257-825005264545",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-get-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base-url}}/logs/device/{{deviceId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"logs",
														"device",
														"{{deviceId}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "55233923-3615-4333-93ee-037f8faefd8c",
												"type": "text/javascript",
												"exec": [
													"var getLogsSchema = {",
													"  \"$schema\": \"http://json-schema.org/draft-07/schema\",",
													"  \"$id\": \"http://example.com/example.json\",",
													"  \"type\": \"array\",",
													"  \"title\": \"Device Log Info\",",
													"  \"description\": \"Device Log Information\",",
													"  \"default\": [],",
													"  \"items\": {",
													"    \"type\": \"object\",",
													"    \"properties\": {",
													"      \"timestamp\": {",
													"        \"type\": \"string\",",
													"        \"format\": \"date-time\"",
													"      },",
													"      \"level\": {",
													"        \"type\": \"string\",",
													"        \"enum\": [\"critical\", \"error\", \"warning\", \"info\", \"debug\", \"trace\" ]",
													"      },",
													"      \"deviceId\": {",
													"        \"type\": \"string\",",
													"        \"format\": \"uuid\"",
													"      },",
													"      \"title\": {",
													"        \"type\": \"string\",",
													"        \"minLength\": 4",
													"      },",
													"      \"message\": {",
													"        \"type\": \"string\",",
													"        \"minLength\": 8,",
													"      },",
													"      \"logId\": {",
													"        \"type\": \"string\",",
													"        \"format\": \"uuid\"",
													"      }",
													"    },",
													"    \"required\": [",
													"      \"timestamp\",",
													"      \"level\",",
													"      \"title\",",
													"      \"message\",",
													"      \"logId\"",
													"    ]",
													"  },",
													"  \"uniqueItems\": true",
													"};",
													"",
													"pm.environment.set(\"getAllSchema\", getLogsSchema);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "d045bd70-276b-4db5-a04f-fa83b35a4121",
												"type": "text/javascript",
												"exec": [
													"var getFilteredSchema = pm.environment.get(\"getAllSchema\");",
													"var Ajv  = require('ajv'),",
													"    ajv = new Ajv(),",
													"    schema = getFilteredSchema;",
													"(pm.response.code===200 ? pm.test : pm.test.skip)('Reply Schema is valid', function () {",
													"    pm.expect(ajv.validate(schema, pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;",
													"});"
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Delete Controller Logs",
									"item": [
										{
											"name": "Delete Controller Logs",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "f21cf7a6-2829-4abe-b292-fb01ad9da86e",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "816961f1-1d7f-4aa1-a703-4e226ca8ea1c",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-oper-admin-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{base-url}}/logs/controller",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"logs",
														"controller"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "43ae2484-0c17-4c4b-a475-e53ad6ee9cb4",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6e90e2da-1f4e-4a81-9722-1903857d1447",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Delete Logs for Specific Device",
									"item": [
										{
											"name": "Delete Logs for Specified Device",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "86d0621d-b599-4692-b1dd-f1c39c636bf4",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "36fbb3a0-51b3-4db5-9fab-31f8fc89aa82",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-oper-admin-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{base-url}}/logs/device/{{deviceId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"logs",
														"device",
														"{{deviceId}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "03662c2e-7937-492d-99c9-51fcaa583c7e",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ad5bba64-dfbd-4668-b3ae-92a320e34bfe",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Delete all Device Logs",
									"item": [
										{
											"name": "Delete Logs for all Devices",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "cbf7c04f-ef13-472d-9bf1-ab9511983c74",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-oper-admin-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "b6983afb-84c2-4977-baca-37d189b60f13",
														"exec": [
															"var simBaseUrl = pm.collectionVariables.get(\"sim-url\");",
															"",
															"//Simulator - Create a List of 2 Device Logs",
															"var simAction = pm.collectionVariables.get(\"sim-register-device-logs\");",
															"var devId = pm.collectionVariables.get(\"deviceId\");",
															"var options = {",
															"  'method': 'POST',",
															"  'url': simBaseUrl + \"/\" + simAction + \"/\" + devId,",
															"  'header': {",
															"    'Content-Type': 'application/json',",
															"    'Accept': 'application/json'",
															"  }",
															"};",
															"pm.sendRequest(options, function (err, response) {",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{base-url}}/logs/devices",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"logs",
														"devices"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "40312beb-750e-4cfa-96fa-ac32212c6fa1",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "df68acaf-9206-4905-b32d-d565a7494bd4",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Unsupported Operations",
									"item": [
										{
											"name": "(unsupported) POST on /logs/controller",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ed003990-effa-4a2d-8593-9f24e197f0e8",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-conflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{base-url}}/logs/controller",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"logs",
														"controller"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) PUT on /logs/controller",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f359c279-9e62-4a80-b225-c2151d2556a1",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-conflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{base-url}}/logs/controller",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"logs",
														"controller"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) PATCH on /logs/controller",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0b34de2d-07f5-4df8-9ef9-721d7ba2ac17",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-conflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "{{base-url}}/logs/controller",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"logs",
														"controller"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) POST on /logs/device/*",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "656e7164-47df-4a6e-a646-adc49bd470ce",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-conflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{base-url}}/logs/device/{{deviceId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"logs",
														"device",
														"{{deviceId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) POST on /logs/devices",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3498425d-c873-4c38-b390-98d9f9b0e189",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-conflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"url": {
													"raw": "{{base-url}}/logs/devices",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"logs",
														"devices"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) PUT on /logs/device/*",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "54c29d5c-c2bd-4a1f-82e2-69637b2e45eb",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-conflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{base-url}}/logs/device/{{deviceId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"logs",
														"device",
														"{{deviceId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) PUT on /logs/devices",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a44dd1cb-2692-4156-b14a-96f9409ff0e4",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-conflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"url": {
													"raw": "{{base-url}}/logs/devices",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"logs",
														"devices"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) PATCH on /logs/device/*",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a3040e26-d42b-4ab9-b0b2-285a4444dc6b",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-conflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "{{base-url}}/logs/device/{{deviceId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"logs",
														"device",
														"{{deviceId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) PATCH on /logs/devices",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2422e07d-6155-469c-ba5c-8857fea6f223",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-conflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"url": {
													"raw": "{{base-url}}/logs/devices",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"logs",
														"devices"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) GET on /device",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "cb32af1c-6bba-4059-933e-8299ec0b9589",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-noconflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base-url}}/logs/device",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"logs",
														"device"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) DELETE on /device",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2ee72f69-33a5-4bb1-8b3c-e383740ad0c9",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-noconflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{base-url}}/logs/device",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"logs",
														"device"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6cd7e3db-46c9-4e59-83ed-cdf5640e74b9",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "57360d8f-8983-495f-b8a1-f3f28917f4e3",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Timers",
							"item": [
								{
									"name": "PREP",
									"item": [
										{
											"name": "[PREP] Get valid controlId (direct)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "134215c8-50af-44b8-b676-02ed5ba255e0",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "ac139207-9df7-432d-92aa-50cefcbc8fb0",
														"exec": [
															"var uuId = null;",
															"if (pm.response.code === 201) {",
															"  var controlId = pm.response.json().controlId;",
															"  if (controlId != null) {",
															"    pm.collectionVariables.set(\"controlId-direct\", controlId);",
															"    uuId = controlId;",
															"  }",
															"}",
															"if (uuId === null) {",
															"  var tempId = pm.collectionVariables.get(\"temp-id\");",
															"  pm.collectionVariables.set(\"controlId-direct\", tempId);",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"Channel\",\n  \"description\": \"Channel Control desc\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/controls/device/{{deviceId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"controls",
														"device",
														"{{deviceId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[PREP] Get valid controlId (slider)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "bd5acae3-6294-4637-9c1d-6f0818a09a76",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "8a158096-7b8c-4910-983f-1147737f1779",
														"exec": [
															"var uuId = null;",
															"if (pm.response.code === 201) {",
															"  var controlId = pm.response.json().controlId;",
															"  if (controlId != null) {",
															"    pm.collectionVariables.set(\"controlId-slider\", controlId);",
															"    uuId = controlId;",
															"  }",
															"}",
															"if (uuId === null) {",
															"  var tempId = pm.collectionVariables.get(\"temp-id\");",
															"  pm.collectionVariables.set(\"controlId-slider\", tempId);",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"Volume\",\n  \"description\": \"Volume Control desc\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/controls/device/{{deviceId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"controls",
														"device",
														"{{deviceId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "[PREP] Get valid controlId (toggle)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "3d45cd12-d255-4986-b30b-64a402188074",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "7387c679-6293-4959-a0df-f5f261ec3302",
														"exec": [
															"var uuId = null;",
															"if (pm.response.code === 201) {",
															"  var controlId = pm.response.json().controlId;",
															"  if (controlId != null) {",
															"    pm.collectionVariables.set(\"controlId-toggle\", controlId);",
															"    uuId = controlId;",
															"  }",
															"}",
															"if (uuId === null) {",
															"  var tempId = pm.collectionVariables.get(\"temp-id\");",
															"  pm.collectionVariables.set(\"controlId-toggle\", tempId);",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"Mute\",\n  \"description\": \"Mute Control desc\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/controls/device/{{deviceId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"controls",
														"device",
														"{{deviceId}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Register a Timer",
									"item": [
										{
											"name": "Register a Timer",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "102e9e68-9274-4546-827d-fa2ae4102da2",
														"exec": [
															"var uuId = null;",
															"if (pm.response.code === 201) {",
															"  var timerId = pm.response.json().timerId;",
															"  if (timerId != null) {",
															"    pm.collectionVariables.set(\"timerId\", timerId);",
															"    uuId = timerId;",
															"  }",
															"}",
															"if (uuId === null) {",
															"  var tempId = pm.collectionVariables.get(\"temp-id\");",
															"  pm.collectionVariables.set(\"timerId\", tempId);",
															"}",
															"",
															"var expectedResult = pm.environment.get(\"expected-create-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "8411eea3-fb61-47ec-9647-fdbb6d03c6ef",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"timerType\": \"interval\",\n  \"intervalPattern\": \"daily\",\n  \"startDateTime\": \"2020-11-05T20:40:34.800Z\",\n  \"endDateTime\": \"2020-12-05T20:40:34.800Z\",\n  \"intervalPeriod\": 1,\n  \"setDateTimes\": [],\n  \"timerTarget\": [\n    {\n      \"controlId\": \"{{controlId-direct}}\",\n      \"action\": \"direct\",\n      \"directValue\": \"15\"\n    },\n    {\n      \"controlId\": \"{{controlId-slider}}\",\n      \"action\": \"slider-up\"\n    },\n    {\n      \"controlId\": \"{{controlId-toggle}}\",\n      \"action\": \"toggle\"\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/timers",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"timers"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "cc4e5db7-cce1-473c-8c92-80a151c7b635",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a1bdc7bd-5c6f-40f0-b5f7-9595a9fa967e",
												"type": "text/javascript",
												"exec": [
													"var creationSchema = pm.environment.get(\"creationSchema\");",
													"var Ajv  = require('ajv'),",
													"    ajv = new Ajv(),",
													"    schema = creationSchema;",
													"(pm.response.code===201 ? pm.test : pm.test.skip)('Reply Schema is valid', function () {",
													"    pm.expect(ajv.validate(schema, pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;",
													"});"
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "List Timers",
									"item": [
										{
											"name": "List all Timers",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5e04a69f-83bc-4a10-a8f7-836717c069f7",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-get-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base-url}}/timers",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"timers"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "98b07319-52e4-433e-9a3f-a9c3f85b0587",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "51613582-d411-478e-b55a-d990f43b6632",
												"type": "text/javascript",
												"exec": [
													"var getAllSchema = pm.environment.get(\"getAllSchema\");",
													"var Ajv  = require('ajv'),",
													"    ajv = new Ajv(),",
													"    schema = getAllSchema;",
													"(pm.response.code===200 ? pm.test : pm.test.skip)('Reply Schema is valid', function () {",
													"    pm.expect(ajv.validate(schema, pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;",
													"});"
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Get Specific Timer Info",
									"item": [
										{
											"name": "List Specific Timer",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "9f244437-cf26-4e8c-b12d-f87fb1a21aea",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "75c96e94-6c49-4ebf-8843-d71e234cc1f3",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-get-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base-url}}/timer/{{timerId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"timer",
														"{{timerId}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b405fb3e-e5c9-4af5-8f6a-5d450dc7da3f",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6c259550-3a13-497e-a7e2-129345907468",
												"type": "text/javascript",
												"exec": [
													"var getOneSchema = pm.environment.get(\"getOneSchema\");",
													"var Ajv  = require('ajv'),",
													"    ajv = new Ajv(),",
													"    schema = getOneSchema;",
													"(pm.response.code===200 ? pm.test : pm.test.skip)('Reply Schema is valid', function () {",
													"    pm.expect(ajv.validate(schema, pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;",
													"});"
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Modify a Timer",
									"item": [
										{
											"name": "Modify a Timer",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "1454e232-ed37-4e12-8442-393a6d94dae7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "94be0e3f-30b0-471a-808f-39e53ef8558a",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-oper-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"timerType\": \"interval\",\n  \"intervalPattern\": \"daysPerWeek\",\n  \"startDateTime\": \"2020-11-05T20:40:34.800Z\",\n  \"endDateTime\": \"2020-12-05T20:40:34.800Z\",\n  \"intervalPeriod\": 2,\n  \"setDateTimes\": [],\n  \"timerTarget\": [\n    {\n      \"controlId\": \"{{controlId-direct}}\",\n      \"action\": \"direct\",\n      \"directValue\": \"15\"\n    },\n    {\n      \"controlId\": \"{{controlId-slider}}\",\n      \"action\": \"slider-up\"\n    },\n    {\n      \"controlId\": \"{{controlId-toggle}}\",\n      \"action\": \"toggle\"\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/timer/{{timerId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"timer",
														"{{timerId}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "e61e8983-9066-4b67-b967-8efdab909055",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "1388b6a9-fee5-455b-89f1-924e1ae04f81",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Set Action to Timer",
									"item": [
										{
											"name": "Set Action to Timer",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "2f01f72a-9d69-440d-bfe7-b90dd364e8ea",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "ce2824ad-f337-4004-8db5-63582c6a23d1",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-oper-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"timerTarget\": [\n    {\n      \"controlId\": \"{{controlId-direct}}\",\n      \"action\": \"direct\",\n      \"directValue\": \"3\"\n    },\n    {\n      \"controlId\": \"{{controlId-slider}}\",\n      \"action\": \"slider-down\"\n    },\n    {\n      \"controlId\": \"{{controlId-toggle}}\",\n      \"action\": \"toggle\"\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/timer/{{timerId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"timer",
														"{{timerId}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "06a79817-dd5a-409d-a551-d1bf56f63d87",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "84096bb7-bbea-468e-b37f-1a739be10ea1",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Delete a Timer",
									"item": [
										{
											"name": "Delete a Timer",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "56fdbe0e-9c67-429d-988d-132ea86d881a",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "c565241f-5449-4c0d-9a9f-6912cea4abac",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-oper-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{base-url}}/timer/{{timerId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"timer",
														"{{timerId}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a7512dd2-d466-484a-aa39-aae543a9dae9",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "16768138-cb0d-40c8-b255-648fbaedd016",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Usupported Operations",
									"item": [
										{
											"name": "(unsupported) GET on /timer",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "01028dc6-9421-4988-b82b-cf999795e362",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-noconflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base-url}}/timer",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"timer"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) POST on /timer/*",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "4383e3fc-2f5a-459b-af7f-7748acb60101",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-conflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"test\" : \"value\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/timer/{{timerId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"timer",
														"{{timerId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) PUT on /timer",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1be500ef-b384-4e68-a77e-392612012f73",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-noconflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"test\" : \"value\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/timer",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"timer"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) PUT on /timers",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "93040da4-772e-4e0d-bf3d-360e183a8b21",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-conflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"test\" : \"value\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/timers",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"timers"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) PATCH on /timer",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b5ac046c-37da-4856-93d9-772a934a9761",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-noconflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"test\" : \"value\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/timer",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"timer"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) PATCH on /timers",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e1593ed0-25fa-4321-aae1-11d3f6fc5415",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-conflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"test\" : \"value\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/timers",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"timers"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) DELETE on /timer",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ddd1141a-67c5-4127-aa0a-bd9b921f0126",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-noconflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{base-url}}/timer",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"timer"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) DELETE on /timers",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3d7b28fd-f38e-4e77-a46e-24b4908f92f4",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-conflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{base-url}}/timers",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"timers"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "865c22cf-d161-4b98-bace-f87fa5872345",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c59f484a-5aea-4efa-8fcd-fe09e8954d7c",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a87143f2-2505-48d3-a663-4ba6b5fcd7eb",
										"type": "text/javascript",
										"exec": [
											"var getTimersSchema = {",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema\",",
											"  \"$id\": \"http://example.com/example.json\",",
											"  \"type\": \"array\",",
											"  \"title\": \"Timer Info\",",
											"  \"description\": \"Timer Information\",",
											"  \"default\": [],",
											"  \"items\": {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"      \"timerId\": {",
											"        \"type\": \"string\",",
											"        \"format\": \"uuid\"",
											"      },",
											"      \"timerType\": {",
											"        \"type\": \"string\",",
											"        \"enum\": [\"once\", \"interval\"]",
											"      },",
											"      \"intervalPattern\": {",
											"        \"type\": [\"string\", \"null\"],",
											"        \"enum\": [\"timesPerDay\", \"daily\", \"daysPerWeek\", \"weekly\", \"daysPerMonth\", \"monthly\", \"daysPerYear\", \"yearly\", \"custom\"]",
											"      },",
											"      \"startDateTime\": {",
											"        \"type\": \"string\",",
											"        \"format\": \"date-time\"",
											"      },",
											"      \"endDateTime\": {",
											"        \"type\": [\"string\", \"null\"],",
											"        \"format\": \"date-time\"",
											"      },",
											"      \"intervalPeriod\": {",
											"        \"type\": \"integer\",",
											"        \"minimum\": 0,",
											"        \"maximum\": 365",
											"      },",
											"      \"setDateTimes\": {",
											"        \"type\": \"array\",",
											"        \"default\": [],",
											"        \"items\": {",
											"          \"type\": \"string\",",
											"          \"format\": \"date-time\"",
											"        }",
											"      },",
											"      \"timerTarget\": {",
											"        \"type\": \"array\",",
											"        \"default\": [],",
											"        \"items\": {",
											"          \"type\": \"object\",",
											"          \"properties\": {",
											"            \"controlId\": {",
											"              \"type\": \"string\",",
											"              \"format\": \"uuid\"",
											"            },",
											"            \"action\": {",
											"              \"type\": \"string\",",
											"              \"enum\": [\"switch-on\", \"switch-off\", \"direct\", \"slider-up\", \"slider-down\", \"toggle\"]",
											"            },",
											"            \"directValue\": {",
											"              \"type\": [\"string\", \"null\"],",
											"              \"minLength\": 1,",
											"              \"maxLength\": 128",
											"            }",
											"          },",
											"          \"required\": [",
											"            \"controlId\",",
											"            \"action\"",
											"          ]",
											"        }",
											"      }",
											"    },",
											"    \"required\": [",
											"      \"timerId\",",
											"      \"timerType\",",
											"      \"timerTarget\"",
											"    ]",
											"  },",
											"  \"uniqueItems\": true",
											"};",
											"",
											"var getTimerSchema = {",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema\",",
											"  \"$id\": \"http://example.com/example.json\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"timerId\": {",
											"      \"type\": \"string\",",
											"      \"format\": \"uuid\"",
											"    },",
											"    \"timerType\": {",
											"      \"type\": \"string\",",
											"      \"enum\": [\"once\", \"interval\"]",
											"    },",
											"    \"intervalPattern\": {",
											"      \"type\": [\"string\", \"null\"],",
											"      \"enum\": [\"timesPerDay\", \"daily\", \"daysPerWeek\", \"weekly\", \"daysPerMonth\", \"monthly\", \"daysPerYear\", \"yearly\", \"custom\"]",
											"    },",
											"    \"startDateTime\": {",
											"      \"type\": \"string\",",
											"      \"format\": \"date-time\"",
											"    },",
											"    \"endDateTime\": {",
											"      \"type\": [\"string\", \"null\"],",
											"      \"format\": \"date-time\"",
											"    },",
											"    \"intervalPeriod\": {",
											"      \"type\": \"integer\",",
											"      \"minimum\": 0,",
											"      \"maximum\": 365",
											"    },",
											"    \"setDateTimes\": {",
											"      \"type\": \"array\",",
											"      \"default\": [],",
											"      \"items\": {",
											"        \"type\": \"string\",",
											"        \"format\": \"date-time\"",
											"      }",
											"    },",
											"    \"timerTarget\": {",
											"      \"type\": \"array\",",
											"      \"default\": [],",
											"      \"items\": {",
											"        \"type\": \"object\",",
											"        \"properties\": {",
											"          \"controlId\": {",
											"            \"type\": \"string\",",
											"            \"format\": \"uuid\"",
											"          },",
											"          \"action\": {",
											"            \"type\": \"string\",",
											"            \"enum\": [\"switch-on\", \"switch-off\", \"direct\", \"slider-up\", \"slider-down\", \"toggle\"]",
											"          },",
											"          \"directValue\": {",
											"            \"type\": [\"string\", \"null\"],",
											"            \"minLength\": 1,",
											"            \"maxLength\": 128",
											"          }",
											"        },",
											"        \"required\": [",
											"          \"controlId\",",
											"          \"action\"",
											"        ]",
											"      }",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"timerId\",",
											"    \"timerType\",",
											"    \"timerTarget\"",
											"  ]",
											"};",
											"",
											"var createTimerSchema = {",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema\",",
											"  \"$id\": \"http://example.com/example.json\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"timerId\": {",
											"      \"type\": \"string\",",
											"      \"format\": \"uuid\"",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"timerId\"",
											"  ]",
											"};",
											"",
											"pm.environment.set(\"getOneSchema\", getTimerSchema);",
											"pm.environment.set(\"getAllSchema\", getTimersSchema);",
											"pm.environment.set(\"creationSchema\", createTimerSchema);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ee5f0da8-d6d2-4e00-bf67-9fa4b9674cb2",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Zones",
							"item": [
								{
									"name": "Register a Zone",
									"item": [
										{
											"name": "Register a Zone",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "de751967-eb28-4cec-967e-27ef3af72078",
														"exec": [
															"var uuId = null;",
															"if (pm.response.code === 201) {",
															"  var zoneId = pm.response.json().zoneId;",
															"  if (zoneId != null) {",
															"    pm.collectionVariables.set(\"zoneId\", zoneId);",
															"    uuId = zoneId;",
															"  }",
															"}",
															"if (uuId === null) {",
															"  var tempId = pm.collectionVariables.get(\"temp-id\");",
															"  pm.collectionVariables.set(\"zoneId\", tempId);",
															"}",
															"",
															"var expectedResult = pm.environment.get(\"expected-create-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"Speakers - Living Room\",\n  \"comment\": \"All Speakers grouped in the Living Room\",\n  \"deviceIds\": [\n    \"{{deviceId}}\"\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/zones",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"zones"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b1134f8e-5dac-4e4d-bf50-820180e3877c",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6150e387-e332-4063-8a42-e0af20501ae6",
												"type": "text/javascript",
												"exec": [
													"var creationSchema = pm.environment.get(\"creationSchema\");",
													"var Ajv  = require('ajv'),",
													"    ajv = new Ajv(),",
													"    schema = creationSchema;",
													"(pm.response.code===201 ? pm.test : pm.test.skip)('Reply Schema is valid', function () {",
													"    pm.expect(ajv.validate(schema, pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;",
													"});"
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "List Zones",
									"item": [
										{
											"name": "List all Zones",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "df168044-aae4-404f-bb11-46785546875d",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-get-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base-url}}/zones",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"zones"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "479b81a3-8b47-4f81-900c-2efdefa52623",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2fe5f75a-456f-47f4-9ddf-24fa463204b4",
												"type": "text/javascript",
												"exec": [
													"var getAllSchema = pm.environment.get(\"getAllSchema\");",
													"var Ajv  = require('ajv'),",
													"    ajv = new Ajv(),",
													"    schema = getAllSchema;",
													"(pm.response.code===200 ? pm.test : pm.test.skip)('Reply Schema is valid', function () {",
													"    pm.expect(ajv.validate(schema, pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;",
													"});"
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Get Specific Zone Info",
									"item": [
										{
											"name": "List Specific Zone",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "296e4713-a899-48e7-8234-c9de478c408b",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "ba43108a-3240-4162-a0c0-7d00e706aae3",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-get-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base-url}}/zone/{{zoneId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"zone",
														"{{zoneId}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "802631e7-e807-40df-be86-001a099a976b",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a36515ef-a904-4a95-a5e4-d0030a192e0b",
												"type": "text/javascript",
												"exec": [
													"var getOneSchema = pm.environment.get(\"getOneSchema\");",
													"var Ajv  = require('ajv'),",
													"    ajv = new Ajv(),",
													"    schema = getOneSchema;",
													"(pm.response.code===200 ? pm.test : pm.test.skip)('Reply Schema is valid', function () {",
													"    pm.expect(ajv.validate(schema, pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;",
													"});"
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Modify a Zone",
									"item": [
										{
											"name": "Modify a Zone",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "7e0ca571-c7c1-425e-8fcf-47aa86b1df13",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "c720fd06-0d86-4bb4-b8e1-780fe64d23b6",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-oper-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"name\": \"Speakers - Living Room Mod\",\n  \"comment\": \"All Speakers grouped in the Living Room Mod\",\n  \"deviceIds\": [\n    \"{{deviceId}}\"\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/zone/{{zoneId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"zone",
														"{{zoneId}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "87eb829c-4b64-47f1-a0ae-6a11c5eb5e1c",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "4b2cfa5f-06bd-4e6d-b5c3-66993aae8215",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Register Devices to Zone",
									"item": [
										{
											"name": "Register Devices to Zone",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "f5f8f336-cdf9-4a7f-9767-6653984eab28",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "c5143c58-4df7-4101-a495-b4e7e887da30",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-oper-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"deviceIds\": [\n    \"{{deviceId}}\"\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/zone/{{zoneId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"zone",
														"{{zoneId}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a98b0b89-f928-4b2c-b300-1b9d3ca633b8",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "169e631d-ae14-45a1-8d8d-3b75ebe1808a",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Delete a Zone",
									"item": [
										{
											"name": "Delete a Zone",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "ae9f0943-3f7c-4527-9dc1-1baa72401ea8",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "b4dab675-fcae-4144-900c-e655d4577f44",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-oper-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{base-url}}/zone/{{zoneId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"zone",
														"{{zoneId}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6303ca5c-b33f-43ec-86f0-1755ba432dcc",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "7c5c1605-ba94-41a8-b655-40f2d5767fb5",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Usupported Operations",
									"item": [
										{
											"name": "(unsupported) GET on /zone",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "bc7a2100-2807-4b49-a119-01a1fdd989e6",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-noconflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base-url}}/zone",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"zone"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) POST on /zone/*",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "48ce56ef-6613-4e14-946c-c6d6a6304500",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-conflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"test\" : \"value\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/zone/{{zoneId}}",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"zone",
														"{{zoneId}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) PUT on /zone",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f1d4f3e7-97f5-4731-8e67-e470265347a9",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-noconflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"test\" : \"value\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/zone",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"zone"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) PUT on /zones",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "230e291d-5544-46cb-841c-0fdc99ce719c",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-conflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"test\" : \"value\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/zones",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"zones"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) PATCH on /zone",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9bb06643-7c0b-4b4b-aeb3-4f9f9d5caa84",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-noconflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"test\" : \"value\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/zone",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"zone"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) PATCH on /zones",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0715e98a-712d-444a-bc1d-7cae4c078b49",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-conflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"test\" : \"value\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base-url}}/zones",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"zones"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) DELETE on /zone",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1d5f37a8-a9df-4b49-802f-dd5da69bedac",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-noconflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{base-url}}/zone",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"zone"
													]
												}
											},
											"response": []
										},
										{
											"name": "(unsupported) DELETE on /zones",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "efde75f4-a333-450e-a5ee-efa5accb3188",
														"exec": [
															"var expectedResult = pm.environment.get(\"expected-unsup-oper-conflict-result\");",
															"pm.test(\"Status code is \" + expectedResult + \"\", function () {",
															"    pm.response.to.have.status(expectedResult);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{base-url}}/zones",
													"host": [
														"{{base-url}}"
													],
													"path": [
														"zones"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "687f61e7-dabf-4af4-8c7a-a3b7305799ce",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "d7eecb49-fc1b-4f21-a5ef-8b3ae95c6957",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2a3495f1-999d-43db-9833-324ab25c5630",
										"type": "text/javascript",
										"exec": [
											"var getZonesSchema = {",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema\",",
											"  \"$id\": \"http://example.com/example.json\",",
											"  \"type\": \"array\",",
											"  \"title\": \"Zone Info\",",
											"  \"description\": \"Zone Information\",",
											"  \"default\": [],",
											"  \"items\": {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"      \"zoneId\": {",
											"        \"type\": \"string\",",
											"        \"format\": \"uuid\"",
											"      },",
											"      \"name\": {",
											"        \"type\": \"string\",",
											"        \"minLength\": 2,",
											"        \"maxLength\": 128",
											"      },",
											"      \"comment\": {",
											"        \"type\": \"string\",",
											"        \"minLength\": 8,",
											"        \"maxLength\": 1024",
											"      },",
											"      \"deviceIds\": {",
											"        \"type\": \"array\",",
											"        \"default\": [],",
											"        \"items\": {",
											"          \"type\": \"string\",",
											"          \"format\": \"uuid\"",
											"        }",
											"      }",
											"    },",
											"    \"required\": [",
											"      \"zoneId\",",
											"      \"name\",",
											"      \"comment\",",
											"      \"deviceIds\"",
											"    ]",
											"  },",
											"  \"uniqueItems\": true",
											"};",
											"",
											"var getZoneSchema = {",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema\",",
											"  \"$id\": \"http://example.com/example.json\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"zoneId\": {",
											"      \"type\": \"string\",",
											"      \"format\": \"uuid\"",
											"    },",
											"    \"name\": {",
											"      \"type\": \"string\",",
											"      \"minLength\": 2,",
											"      \"maxLength\": 128",
											"    },",
											"    \"comment\": {",
											"      \"type\": \"string\",",
											"      \"minLength\": 8,",
											"      \"maxLength\": 1024",
											"    },",
											"    \"deviceIds\": {",
											"      \"type\": \"array\",",
											"      \"default\": [],",
											"      \"items\": {",
											"        \"type\": \"string\",",
											"        \"format\": \"uuid\"",
											"      }",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"zoneId\",",
											"    \"name\",",
											"    \"comment\",",
											"    \"deviceIds\"",
											"  ]",
											"};",
											"",
											"var createZoneSchema = {",
											"  \"$schema\": \"http://json-schema.org/draft-07/schema\",",
											"  \"$id\": \"http://example.com/example.json\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"zoneId\": {",
											"      \"type\": \"string\",",
											"      \"format\": \"uuid\"",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"zoneId\"",
											"  ]",
											"};",
											"",
											"pm.environment.set(\"getOneSchema\", getZoneSchema);",
											"pm.environment.set(\"getAllSchema\", getZonesSchema);",
											"pm.environment.set(\"creationSchema\", createZoneSchema);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b1e1a3d6-e2f4-4e6e-b610-95c8140c97cc",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"auth": {
						"type": "oauth2",
						"oauth2": [
							{
								"key": "accessToken",
								"value": "{{access-token}}",
								"type": "string"
							},
							{
								"key": "addTokenTo",
								"value": "header",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "40595984-3dcf-41d9-8fb4-369ce3fb269d",
								"type": "text/javascript",
								"exec": [
									"pm.environment.set(\"expected-get-result\", 200);",
									"pm.environment.set(\"expected-oper-result\", 200);",
									"pm.environment.set(\"expected-create-result\", 201);",
									"pm.environment.set(\"expected-oper-admin-result\", 200);",
									"pm.environment.set(\"expected-create-admin-result\", 201);",
									"pm.environment.set(\"expected-unsup-oper-noconflict-result\", 404);",
									"pm.environment.set(\"expected-unsup-oper-conflict-result\", 500);",
									"",
									"var accessToken = pm.collectionVariables.get(\"access-token-admin\");",
									"pm.environment.set(\"access-token\", accessToken);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4116a5e5-d8bf-4731-bda6-fead262e42fc",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "497248c8-ebc2-402c-8c45-6207f971e5c2",
						"type": "text/javascript",
						"exec": [
							"var errorSchema = {",
							"  \"$schema\": \"http://json-schema.org/draft-07/schema\",",
							"  \"$id\": \"http://example.com/example.json\",",
							"  \"type\": \"object\",",
							"  \"properties\": {",
							"    \"type\": {",
							"      \"type\": \"string\",",
							"      \"enum\": [\"ERROR\", \"EXCEPTION\"]",
							"    },",
							"    \"message\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"timestamp\": {",
							"      \"type\": \"string\",",
							"      \"format\": \"date-time\"",
							"    },",
							"    \"details\": {",
							"      \"type\": \"string\",",
							"      \"minLength\": 4",
							"    },",
							"    \"logId\": {",
							"      \"type\": \"string\",",
							"      \"format\": \"uuid\"",
							"    }",
							"  },",
							"  \"required\": [",
							"    \"type\",",
							"    \"message\",",
							"    \"timestamp\",",
							"    \"details\",",
							"    \"logId\"",
							"  ]",
							"};",
							"",
							"pm.environment.set(\"errorSchema\", errorSchema);"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "4e35cd15-f6a0-4153-858d-47276e8438bf",
						"type": "text/javascript",
						"exec": [
							"var responseTime = parseInt(pm.collectionVariables.get(\"response-time\"));",
							"pm.test(\"Response time is less than \" + responseTime + \"ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(responseTime);",
							"});",
							"",
							"var errSchema = pm.environment.get(\"errorSchema\");",
							"var Ajv  = require('ajv'),",
							"    ajv = new Ajv(),",
							"    schema = errSchema;",
							"(pm.response.code===500 ? pm.test : pm.test.skip)('Error Schema is valid', function () {",
							"    pm.expect(ajv.validate(schema, pm.response.json()), JSON.stringify(ajv.errors)).to.be.true;",
							"});"
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "29fb37c0-b784-418e-9443-a1c1f28a3fd4",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "95994cb3-371f-4a7c-9f1c-0617ef8adfd3",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "6cb7304a-3603-4973-8563-6a333e6dfb09",
			"key": "base-url",
			"value": "http://localhost:8080"
		},
		{
			"id": "c1b921c4-c083-492c-b904-3ac432ecfbf3",
			"key": "sim-url",
			"value": "http://localhost:8089"
		},
		{
			"id": "e151531c-a348-4412-8931-b9f772c9181e",
			"key": "sim-clean-db",
			"value": "server/clean-redis"
		},
		{
			"id": "4e9d30f2-ab96-4cd6-8d24-cba505a95f57",
			"key": "sim-register-devices",
			"value": "devices/simulation"
		},
		{
			"id": "74887d32-3108-4ea0-9a79-225ef14a5d6e",
			"key": "sim-register-control-logs",
			"value": "logs/controller/simulation"
		},
		{
			"id": "36b666bb-a8cd-4345-a222-19f94d106e70",
			"key": "sim-register-device-logs",
			"value": "logs/devices/simulation"
		},
		{
			"id": "27239618-5045-4b25-b4c8-0d91d5957947",
			"key": "keycloak-url",
			"value": "http://192.168.1.251:8080"
		},
		{
			"id": "8a5689ae-79b4-4a5b-8af7-0dd122bfca3e",
			"key": "response-time",
			"value": "30"
		},
		{
			"id": "49db26d9-64ed-4d1a-9d68-55fae1d93a2d",
			"key": "deviceAddress",
			"value": ""
		},
		{
			"id": "d5917f2b-310d-40b8-b692-2504ed2d2b71",
			"key": "deviceId",
			"value": ""
		},
		{
			"id": "b0760ac9-0e58-4a0d-80c0-0c66b9d6ccda",
			"key": "groupId",
			"value": ""
		},
		{
			"id": "4778cf74-b18e-4f52-99af-104b671b8b1b",
			"key": "controlId-direct",
			"value": ""
		},
		{
			"id": "56754db1-b32f-4a7f-a5e5-aaae2ce5d523",
			"key": "controlId-slider",
			"value": ""
		},
		{
			"id": "df011a22-97ea-441a-a187-2ccfb26efcec",
			"key": "controlId-toggle",
			"value": ""
		},
		{
			"id": "c316aff3-a6ce-436a-b143-c9c16875ae42",
			"key": "logId",
			"value": ""
		},
		{
			"id": "62b38c5d-bf0f-4663-a37d-e2cd48bf9c44",
			"key": "timerId",
			"value": ""
		},
		{
			"id": "2ba7ee3c-8ca1-40d8-a946-a57fa11fa790",
			"key": "zoneId",
			"value": ""
		},
		{
			"id": "58d051e6-a492-40e9-802a-cd83a4fa6ff0",
			"key": "temp-id",
			"value": "11111111-1111-1111-1111-111111111111"
		},
		{
			"id": "9240ec64-396b-48a9-9cad-6d9c79d98548",
			"key": "temp-address",
			"value": "2607:f0d0:1002:51::9"
		},
		{
			"id": "0618be6e-b24b-4090-9325-03467293084b",
			"key": "admin-prep-access-token",
			"value": ""
		},
		{
			"id": "3a266010-e4d6-4e50-80cf-18ecdc93eb62",
			"key": "access-token-standard",
			"value": ""
		},
		{
			"id": "c1188f2c-5148-4b9f-be05-3360ff97183f",
			"key": "access-token-admin",
			"value": ""
		}
	],
	"protocolProfileBehavior": {}
}